yarn run v1.22.17
$ yarn build
$ rm -rf dist/ && tsc --noEmit
$ node esbuild.js
$ node ./dist/bin/nodeprof-test.js /home/soulike/NodeALDataset/explore/json-file-store-6aada66/ node_modules/.bin/_mocha '*.spec.js'


  The jfs module
    ✓ is a class

    ✓ resolves the path correctly (126ms)

    ✓ can pretty print the file content (237ms)

    save method
      ✓ can save an object (344ms)

      ✓ can autosave the id (94ms)

      ✓ can autosave the id with a custom key (65ms)

      ✓ can autosave the id with a custom generator (74ms)

      ✓ can save an object synchronously (38ms)

      ✓ creates a deep copy for the cache (151ms)

    get method
      ✓ can load an object (73ms)

      ✓ returns an error if it cannot load an object (226ms)

    getSync method
      ✓ can load an object synchronously (56ms)

      ✓ returns an error if it cannot load an object (121ms)

    getAll method
      ✓ can load all objects (188ms)

      ✓ can load all objects synchronously (79ms)

    delete method
      ✓ can delete an object (80ms)

      ✓ returns an error if the record does not exist (75ms)

    deleteSync method
      ✓ can delete an object synchonously (82ms)

      ✓ returns an error if the record does not exist (73ms)

    'single' mode
      ✓ stores data in a single file (95ms)

      ✓ it checks for write protection (92ms)

      ✓ loads an existing db (124ms)

      ✓ get data from a single file (84ms)

      ✓ can delete an object (122ms)

      ✓ can be defined if the name is a file

    'memory' mode
      ✓ does not write the data to a file (42ms)


  The jfs module
    ✓ is a class

    ✓ resolves the path correctly

    ✓ can pretty print the file content

    save method
      ✓ can save an object (59ms)

      ✓ can autosave the id (49ms)

      ✓ can autosave the id with a custom key (42ms)

      ✓ can autosave the id with a custom generator

      ✓ can save an object synchronously (40ms)

      ✓ creates a deep copy for the cache (91ms)

    get method
      ✓ can load an object (40ms)

      ✓ returns an error if it cannot load an object (176ms)

    getSync method
      ✓ can load an object synchronously

      ✓ returns an error if it cannot load an object (90ms)

    getAll method
      ✓ can load all objects (74ms)

      ✓ can load all objects synchronously (66ms)

    delete method
      ✓ can delete an object (53ms)

      ✓ returns an error if the record does not exist (127ms)

    deleteSync method
      ✓ can delete an object synchonously

      ✓ returns an error if the record does not exist (59ms)

    'single' mode
      ✓ stores data in a single file (81ms)

      ✓ it checks for write protection (66ms)

      ✓ loads an existing db (116ms)

      ✓ get data from a single file (104ms)

      ✓ can delete an object (94ms)

      ✓ can be defined if the name is a file (51ms)

    'memory' mode
      ✓ does not write the data to a file (47ms)



  52 passing (7s)

AsyncContext: 0.088s
LastExpression: 0.013s
Iterator: 0.02s
Array: 0.027s
Set: 0.007s
Map: 0.007s
Object: 0.858s
FileHandle: 0.003s
FsAsync: 0.382s
FsSync: 0.408s
FsPromises: 0.011s
ArrayBuffer: 0.009s
Buffer: 0.022s
DataView: 0.007s
TypedArray: 0.027s
Primitive: 1.224s
HttpAgent: 0.009s
HttpIncomingMessage: 0.003s
HttpOutgoingMessage: 0.005s
Http: 0.003s
Net: 0.047s
Stream: 0.007s
EventEmitter: 0.008s
Crypto: 0.107s
Zlib: 0.014s
StringDecoder: 0.007s
JSON: 0.031s
max memory usage: 1.2889671325683594 GB
RaceDetector: 1.4s
analysis load: 1.62s
entry: 9.730s
eventCount: 188
raceCount: 13
filteredFPCount: 2151
ResourceCount: 3957
ResourceOperationCount: 12021
analysis: 14.707s
Done in 17.32s.
