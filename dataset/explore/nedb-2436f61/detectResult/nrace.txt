yarn run v1.22.17
$ ./bin/noderacer instrument --outputDir /tmp/nraceOutput /home/soulike/NodeALDataset/explore/nedb-2436f61/
[32m[2021-11-27T15:59:27.877] [INFO] default - [39mRunning command: instrument --outputDir /tmp/nraceOutput /home/soulike/NodeALDataset/explore/nedb-2436f61/
[32m[2021-11-27T15:59:27.880] [INFO] default - [39minstrumenting application: /home/soulike/NodeALDataset/explore/nedb-2436f61/
[32m[2021-11-27T15:59:27.881] [INFO] default - [39mrun command: node /home/soulike/nrace/driver/instApp.js --justGenerate --verbose --outputDir /tmp/nraceOutput /home/soulike/NodeALDataset/explore/nedb-2436f61/ , desc: instrumentation
instrumenting /tmp/nraceOutput/nedb-2436f61/index_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/cursor_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/commonUtilities_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/ensureIndex_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/find_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/findOne_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/findWithIn_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/insert_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/loadDatabase_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/remove_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/benchmarks/update_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/browser-version/build_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/customUtils_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/datastore_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/executor_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/indexes_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/model_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/persistence_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/lib/storage_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/browser-version/out/nedb_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/browser-version/out/nedb.min_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/browser-version/browser-specific/lib/customUtils_orig_.js
instrumenting /tmp/nraceOutput/nedb-2436f61/browser-version/browser-specific/lib/storage_orig_.js
[32m[2021-11-27T15:59:31.597] [INFO] default - [39minstrumentation complete
Done in 3.83s.



  Cursor
    Without sorting
      Ã¢â€”Â¦ Without query, an empty query or a simple query and no skip or limit: [2K[0G      Ã¢Å“â€œ Without query, an empty query or a simple query and no skip or limit (46ms)
      Ã¢â€”Â¦ With an empty collection: [2K[0G      Ã¢Å“â€œ With an empty collection 
      Ã¢â€”Â¦ With a limit: [2K[0G      Ã¢Å“â€œ With a limit 
      Ã¢â€”Â¦ With a skip: [2K[0G      Ã¢Å“â€œ With a skip 
      Ã¢â€”Â¦ With a limit and a skip and method chaining: [2K[0G      Ã¢Å“â€œ With a limit and a skip and method chaining 
      Ã¢â€”Â¦ Without query, an empty query or a simple query and no skip or limit: [2K[0G      Ã¢Å“â€œ Without query, an empty query or a simple query and no skip or limit 
      Ã¢â€”Â¦ With an empty collection: [2K[0G      Ã¢Å“â€œ With an empty collection 
      Ã¢â€”Â¦ With a limit: [2K[0G      Ã¢Å“â€œ With a limit 
      Ã¢â€”Â¦ With a skip: [2K[0G      Ã¢Å“â€œ With a skip 
      Ã¢â€”Â¦ With a limit and a skip and method chaining: [2K[0G      Ã¢Å“â€œ With a limit and a skip and method chaining 
    Sorting of the results
      Ã¢â€”Â¦ Using one sort: [2K[0G      Ã¢Å“â€œ Using one sort 
      Ã¢â€”Â¦ Sorting strings with custom string comparison function: [2K[0G      Ã¢Å“â€œ Sorting strings with custom string comparison function (125ms)
      Ã¢â€”Â¦ With an empty collection: [2K[0G      Ã¢Å“â€œ With an empty collection 
      Ã¢â€”Â¦ Ability to chain sorting and exec: [2K[0G      Ã¢Å“â€œ Ability to chain sorting and exec 
      Ã¢â€”Â¦ Using limit and sort: [2K[0G      Ã¢Å“â€œ Using limit and sort 
      Ã¢â€”Â¦ Using a limit higher than total number of docs shouldnt cause an error: [2K[0G      Ã¢Å“â€œ Using a limit higher than total number of docs shouldnt cause an error 
      Ã¢â€”Â¦ Using limit and skip with sort: [2K[0G      Ã¢Å“â€œ Using limit and skip with sort (42ms)
      Ã¢â€”Â¦ Using too big a limit and a skip with sort: [2K[0G      Ã¢Å“â€œ Using too big a limit and a skip with sort 
      Ã¢â€”Â¦ Using too big a skip with sort should return no result: [2K[0G      Ã¢Å“â€œ Using too big a skip with sort should return no result (40ms)
      Ã¢â€”Â¦ Sorting strings: [2K[0G      Ã¢Å“â€œ Sorting strings (49ms)
      Ã¢â€”Â¦ Sorting nested fields with dates: [2K[0G      Ã¢Å“â€œ Sorting nested fields with dates (62ms)
      Ã¢â€”Â¦ Sorting when some fields are undefined: [2K[0G      Ã¢Å“â€œ Sorting when some fields are undefined (71ms)
      Ã¢â€”Â¦ Sorting when all fields are undefined: [2K[0G      Ã¢Å“â€œ Sorting when all fields are undefined (53ms)
      Ã¢â€”Â¦ Multiple consecutive sorts: [2K[0G      Ã¢Å“â€œ Multiple consecutive sorts (113ms)
      Ã¢â€”Â¦ Similar data, multiple consecutive sorts: [2K[0G      Ã¢Å“â€œ Similar data, multiple consecutive sorts (1130ms)
      Ã¢â€”Â¦ Using one sort: [2K[0G      Ã¢Å“â€œ Using one sort 
      Ã¢â€”Â¦ Sorting strings with custom string comparison function: [2K[0G      Ã¢Å“â€œ Sorting strings with custom string comparison function (138ms)
      Ã¢â€”Â¦ With an empty collection: [2K[0G      Ã¢Å“â€œ With an empty collection 
      Ã¢â€”Â¦ Ability to chain sorting and exec: [2K[0G      Ã¢Å“â€œ Ability to chain sorting and exec 
      Ã¢â€”Â¦ Using limit and sort: [2K[0G      Ã¢Å“â€œ Using limit and sort 
      Ã¢â€”Â¦ Using a limit higher than total number of docs shouldnt cause an error: [2K[0G      Ã¢Å“â€œ Using a limit higher than total number of docs shouldnt cause an error 
      Ã¢â€”Â¦ Using limit and skip with sort: [2K[0G      Ã¢Å“â€œ Using limit and skip with sort 
      Ã¢â€”Â¦ Using too big a limit and a skip with sort: [2K[0G      Ã¢Å“â€œ Using too big a limit and a skip with sort 
      Ã¢â€”Â¦ Using too big a skip with sort should return no result: [2K[0G      Ã¢Å“â€œ Using too big a skip with sort should return no result (47ms)
      Ã¢â€”Â¦ Sorting strings: [2K[0G      Ã¢Å“â€œ Sorting strings (47ms)
      Ã¢â€”Â¦ Sorting nested fields with dates: [2K[0G      Ã¢Å“â€œ Sorting nested fields with dates (57ms)
      Ã¢â€”Â¦ Sorting when some fields are undefined: [2K[0G      Ã¢Å“â€œ Sorting when some fields are undefined (71ms)
      Ã¢â€”Â¦ Sorting when all fields are undefined: [2K[0G      Ã¢Å“â€œ Sorting when all fields are undefined (51ms)
      Ã¢â€”Â¦ Multiple consecutive sorts: [2K[0G      Ã¢Å“â€œ Multiple consecutive sorts (118ms)
      Ã¢â€”Â¦ Similar data, multiple consecutive sorts: [2K[0G      Ã¢Å“â€œ Similar data, multiple consecutive sorts (1082ms)
    Projections
      Ã¢â€”Â¦ Takes all results if no projection or empty object given: [2K[0G      Ã¢Å“â€œ Takes all results if no projection or empty object given 
      Ã¢â€”Â¦ Can take only the expected fields: [2K[0G      Ã¢Å“â€œ Can take only the expected fields (56ms)
      Ã¢â€”Â¦ Can omit only the expected fields: [2K[0G      Ã¢Å“â€œ Can omit only the expected fields (66ms)
      Ã¢â€”Â¦ Cannot use both modes except for _id: [2K[0G      Ã¢Å“â€œ Cannot use both modes except for _id (72ms)
      Ã¢â€”Â¦ Projections on embedded documents - omit type: [2K[0G      Ã¢Å“â€œ Projections on embedded documents - omit type 
      Ã¢â€”Â¦ Projections on embedded documents - pick type: [2K[0G      Ã¢Å“â€œ Projections on embedded documents - pick type 
      Ã¢â€”Â¦ Takes all results if no projection or empty object given: [2K[0G      Ã¢Å“â€œ Takes all results if no projection or empty object given 
      Ã¢â€”Â¦ Can take only the expected fields: [2K[0G      Ã¢Å“â€œ Can take only the expected fields (52ms)
      Ã¢â€”Â¦ Can omit only the expected fields: [2K[0G      Ã¢Å“â€œ Can omit only the expected fields (65ms)
      Ã¢â€”Â¦ Cannot use both modes except for _id: [2K[0G      Ã¢Å“â€œ Cannot use both modes except for _id (77ms)
      Ã¢â€”Â¦ Projections on embedded documents - omit type: [2K[0G      Ã¢Å“â€œ Projections on embedded documents - omit type 
      Ã¢â€”Â¦ Projections on embedded documents - pick type: [2K[0G      Ã¢Å“â€œ Projections on embedded documents - pick type 

  customUtils
    uid
      Ã¢â€”Â¦ Generates a string of the expected length: [2K[0G      Ã¢Å“â€œ Generates a string of the expected length 
      Ã¢â€”Â¦ Generated uids should not be the same: [2K[0G      Ã¢Å“â€œ Generated uids should not be the same 
      Ã¢â€”Â¦ Generates a string of the expected length: [2K[0G      Ã¢Å“â€œ Generates a string of the expected length 
      Ã¢â€”Â¦ Generated uids should not be the same: [2K[0G      Ã¢Å“â€œ Generated uids should not be the same 

  Database
    Ã¢â€”Â¦ Constructor compatibility with v0.6-: [2K[0G    Ã¢Å“â€œ Constructor compatibility with v0.6- (273ms)
    Ã¢â€”Â¦ Constructor compatibility with v0.6-: [2K[0G    Ã¢Å“â€œ Constructor compatibility with v0.6- (258ms)
    Autoloading
      Ã¢â€”Â¦ Can autoload a database and query it right away: [2K[0G      Ã¢Å“â€œ Can autoload a database and query it right away (123ms)
      Ã¢â€”Â¦ Throws if autoload fails: [2K[0G      Ã¢Å“â€œ Throws if autoload fails (100ms)
    Insert
      Ã¢â€”Â¦ Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload: [2K[0G      Ã¢Å“â€œ Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload (53ms)
      Ã¢â€”Â¦ Can insert multiple documents in the database: [2K[0G      Ã¢Å“â€œ Can insert multiple documents in the database 
      Ã¢â€”Â¦ Can insert and get back from DB complex objects with all primitive and secondary types: [2K[0G      Ã¢Å“â€œ Can insert and get back from DB complex objects with all primitive and secondary types 
      Ã¢â€”Â¦ If an object returned from the DB is modified and refetched, the original value should be found: [2K[0G      Ã¢Å“â€œ If an object returned from the DB is modified and refetched, the original value should be found 
      Ã¢â€”Â¦ Cannot insert a doc that has a field beginning with a $ sign: [2K[0G      Ã¢Å“â€œ Cannot insert a doc that has a field beginning with a $ sign 
      Ã¢â€”Â¦ If an _id is already given when we insert a document, use that instead of generating a random one: [2K[0G      Ã¢Å“â€œ If an _id is already given when we insert a document, use that instead of generating a random one 
      Ã¢â€”Â¦ Modifying the insertedDoc after an insert doesnt change the copy saved in the database: [2K[0G      Ã¢Å“â€œ Modifying the insertedDoc after an insert doesnt change the copy saved in the database 
      Ã¢â€”Â¦ Can insert an array of documents at once: [2K[0G      Ã¢Å“â€œ Can insert an array of documents at once 
      Ã¢â€”Â¦ If a bulk insert violates a constraint, all changes are rolled back: [2K[0G      Ã¢Å“â€œ If a bulk insert violates a constraint, all changes are rolled back 
      Ã¢â€”Â¦ If timestampData option is set, a createdAt field is added and persisted: [2K[0G      1) If timestampData option is set, a createdAt field is added and persisted
      Ã¢â€”Â¦ If timestampData option not set, don't create a createdAt and a updatedAt field: [2K[0G      Ã¢Å“â€œ If timestampData option not set, don't create a createdAt and a updatedAt field 
      Ã¢â€”Â¦ If timestampData is set but createdAt is specified by user, don't change it: [2K[0G      2) If timestampData is set but createdAt is specified by user, don't change it
      Ã¢â€”Â¦ If timestampData is set but updatedAt is specified by user, don't change it: [2K[0G      3) If timestampData is set but updatedAt is specified by user, don't change it
      Ã¢â€”Â¦ Can insert a doc with id 0: [2K[0G      Ã¢Å“â€œ Can insert a doc with id 0 
      Ã¢â€”Â¦ If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern: [2K[0G      Ã¢Å“â€œ If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern 
    #getCandidates
      Ã¢â€”Â¦ Can use an index to get docs with a basic match: [2K[0G      Ã¢Å“â€œ Can use an index to get docs with a basic match 
      Ã¢â€”Â¦ Can use an index to get docs with a $in match: [2K[0G      Ã¢Å“â€œ Can use an index to get docs with a $in match 
      Ã¢â€”Â¦ If no index can be used, return the whole database: [2K[0G      Ã¢Å“â€œ If no index can be used, return the whole database 
      Ã¢â€”Â¦ Can use indexes for comparison matches: [2K[0G      Ã¢Å“â€œ Can use indexes for comparison matches (38ms)
      Ã¢â€”Â¦ Can set a TTL index that expires documents: [2K[0G      Ã¢Å“â€œ Can set a TTL index that expires documents (366ms)
      Ã¢â€”Â¦ TTL indexes can expire multiple documents and only what needs to be expired: [2K[0G      Ã¢Å“â€œ TTL indexes can expire multiple documents and only what needs to be expired (382ms)
      Ã¢â€”Â¦ Document where indexed field is absent or not a date are ignored: [2K[0G      Ã¢Å“â€œ Document where indexed field is absent or not a date are ignored (252ms)
    Find
      Ã¢â€”Â¦ Can find all documents if an empty query is used: [2K[0G      Ã¢Å“â€œ Can find all documents if an empty query is used 
      Ã¢â€”Â¦ Can find all documents matching a basic query: [2K[0G      Ã¢Å“â€œ Can find all documents matching a basic query 
      Ã¢â€”Â¦ Can find one document matching a basic query and return null if none is found: [2K[0G      Ã¢Å“â€œ Can find one document matching a basic query and return null if none is found 
      Ã¢â€”Â¦ Can find dates and objects (non JS-native types): [2K[0G      Ã¢Å“â€œ Can find dates and objects (non JS-native types) 
      Ã¢â€”Â¦ Can use dot-notation to query subfields: [2K[0G      Ã¢Å“â€œ Can use dot-notation to query subfields 
      Ã¢â€”Â¦ Array fields match if any element matches: [2K[0G      Ã¢Å“â€œ Array fields match if any element matches (63ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ Changing the documents returned by find or findOne do not change the database state: [2K[0G      Ã¢Å“â€œ Changing the documents returned by find or findOne do not change the database state 
      Ã¢â€”Â¦ Can use sort, skip and limit if the callback is not passed to find but to exec: [2K[0G      Ã¢Å“â€œ Can use sort, skip and limit if the callback is not passed to find but to exec (42ms)
      Ã¢â€”Â¦ Can use sort and skip if the callback is not passed to findOne but to exec: [2K[0G      Ã¢Å“â€œ Can use sort and skip if the callback is not passed to findOne but to exec (95ms)
      Ã¢â€”Â¦ Can use projections in find, normal or cursor way: [2K[0G      Ã¢Å“â€œ Can use projections in find, normal or cursor way (45ms)
      Ã¢â€”Â¦ Can use projections in findOne, normal or cursor way: [2K[0G      Ã¢Å“â€œ Can use projections in findOne, normal or cursor way (42ms)
    Count
      Ã¢â€”Â¦ Count all documents if an empty query is used: [2K[0G      Ã¢Å“â€œ Count all documents if an empty query is used 
      Ã¢â€”Â¦ Count all documents matching a basic query: [2K[0G      Ã¢Å“â€œ Count all documents matching a basic query 
      Ã¢â€”Â¦ Array fields match if any element matches: [2K[0G      Ã¢Å“â€œ Array fields match if any element matches (58ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
    Update
      Ã¢â€”Â¦ If the query doesn't match anything, database is not modified: [2K[0G      Ã¢Å“â€œ If the query doesn't match anything, database is not modified (39ms)
      Ã¢â€”Â¦ If timestampData option is set, update the updatedAt field: [2K[0G      4) If timestampData option is set, update the updatedAt field
      Ã¢â€”Â¦ Can update multiple documents matching the query: [2K[0G      Ã¢Å“â€œ Can update multiple documents matching the query (83ms)
      Ã¢â€”Â¦ Can update only one document matching the query: [2K[0G      Ã¢Å“â€œ Can update only one document matching the query (86ms)
      Ã¢â€”Â¦ Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields: [2K[0G      Ã¢Å“â€œ Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields 
      Ã¢â€”Â¦ Can update documents using multiple modifiers: [2K[0G      Ã¢Å“â€œ Can update documents using multiple modifiers 
      Ã¢â€”Â¦ Can upsert a document even with modifiers: [2K[0G      Ã¢Å“â€œ Can upsert a document even with modifiers 
      Ã¢â€”Â¦ When using modifiers, the only way to update subdocs is with the dot-notation: [2K[0G      Ã¢Å“â€œ When using modifiers, the only way to update subdocs is with the dot-notation 
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ If an error is thrown by a modifier, the database state is not changed: [2K[0G      Ã¢Å“â€œ If an error is thrown by a modifier, the database state is not changed 
      Ã¢â€”Â¦ Cant change the _id of a document: [2K[0G      Ã¢Å“â€œ Cant change the _id of a document 
      Ã¢â€”Â¦ Non-multi updates are persistent: [2K[0G      Ã¢Å“â€œ Non-multi updates are persistent (62ms)
      Ã¢â€”Â¦ Multi updates are persistent: [2K[0G      Ã¢Å“â€œ Multi updates are persistent (95ms)
      Ã¢â€”Â¦ Can update without the options arg (will use defaults then): [2K[0G      Ã¢Å“â€œ Can update without the options arg (will use defaults then) (43ms)
      Ã¢â€”Â¦ If a multi update fails on one document, previous updates should be rolled back: [2K[0G      Ã¢Å“â€œ If a multi update fails on one document, previous updates should be rolled back (42ms)
      Ã¢â€”Â¦ If an index constraint is violated by an update, all changes should be rolled back: [2K[0G      Ã¢Å“â€œ If an index constraint is violated by an update, all changes should be rolled back (42ms)
      Ã¢â€”Â¦ If options.returnUpdatedDocs is true, return all matched docs: [2K[0G      Ã¢Å“â€œ If options.returnUpdatedDocs is true, return all matched docs (71ms)
      Ã¢â€”Â¦ createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement: [2K[0G      5) createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement
      Upserts
        Ã¢â€”Â¦ Can perform upserts if needed: [2K[0G        Ã¢Å“â€œ Can perform upserts if needed 
        Ã¢â€”Â¦ If the update query is a normal object with no modifiers, it is the doc that will be upserted: [2K[0G        Ã¢Å“â€œ If the update query is a normal object with no modifiers, it is the doc that will be upserted 
        Ã¢â€”Â¦ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1: [2K[0G        Ã¢Å“â€œ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1 
        Ã¢â€”Â¦ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2: [2K[0G        Ã¢Å“â€œ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2 
        Ã¢â€”Â¦ Performing upsert with badly formatted fields yields a standard error not an exception: [2K[0G        Ã¢Å“â€œ Performing upsert with badly formatted fields yields a standard error not an exception 
      Callback signature
        Ã¢â€”Â¦ Regular update, multi false: [2K[0G        Ã¢Å“â€œ Regular update, multi false 
        Ã¢â€”Â¦ Regular update, multi true: [2K[0G        Ã¢Å“â€œ Regular update, multi true (44ms)
        Ã¢â€”Â¦ Upsert: [2K[0G        Ã¢Å“â€œ Upsert (43ms)
    Remove
      Ã¢â€”Â¦ Can remove multiple documents: [2K[0G      Ã¢Å“â€œ Can remove multiple documents (63ms)
      Ã¢â€”Â¦ Remove can be called multiple times in parallel and everything that needs to be removed will be: [2K[0G      Ã¢Å“â€œ Remove can be called multiple times in parallel and everything that needs to be removed will be (46ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ Non-multi removes are persistent: [2K[0G      Ã¢Å“â€œ Non-multi removes are persistent (67ms)
      Ã¢â€”Â¦ Multi removes are persistent: [2K[0G      Ã¢Å“â€œ Multi removes are persistent (67ms)
      Ã¢â€”Â¦ Can remove without the options arg (will use defaults then): [2K[0G      Ã¢Å“â€œ Can remove without the options arg (will use defaults then) 
    Using indexes
      Ã¢â€”Â¦ Results of getMatching should never contain duplicates: [2K[0G      Ã¢Å“â€œ Results of getMatching should never contain duplicates 
      ensureIndex and index initialization in database loading
        Ã¢â€”Â¦ ensureIndex can be called right after a loadDatabase and be initialized and filled correctly: [2K[0G        Ã¢Å“â€œ ensureIndex can be called right after a loadDatabase and be initialized and filled correctly (39ms)
        Ã¢â€”Â¦ ensureIndex can be called twice on the same field, the second call will ahve no effect: [2K[0G        Ã¢Å“â€œ ensureIndex can be called twice on the same field, the second call will ahve no effect 
        Ã¢â€”Â¦ ensureIndex can be called after the data set was modified and the index still be correct: [2K[0G        Ã¢Å“â€œ ensureIndex can be called after the data set was modified and the index still be correct (98ms)
        Ã¢â€”Â¦ ensureIndex can be called before a loadDatabase and still be initialized and filled correctly: [2K[0G        Ã¢Å“â€œ ensureIndex can be called before a loadDatabase and still be initialized and filled correctly (43ms)
        Ã¢â€”Â¦ Can initialize multiple indexes on a database load: [2K[0G        Ã¢Å“â€œ Can initialize multiple indexes on a database load (50ms)
        Ã¢â€”Â¦ If a unique constraint is not respected, database loading will not work and no data will be inserted: [2K[0G        Ã¢Å“â€œ If a unique constraint is not respected, database loading will not work and no data will be inserted 
        Ã¢â€”Â¦ If a unique constraint is not respected, ensureIndex will return an error and not create an index: [2K[0G        Ã¢Å“â€œ If a unique constraint is not respected, ensureIndex will return an error and not create an index 
        Ã¢â€”Â¦ Can remove an index: [2K[0G        Ã¢Å“â€œ Can remove an index 
      Indexing newly inserted documents
        Ã¢â€”Â¦ Newly inserted documents are indexed: [2K[0G        Ã¢Å“â€œ Newly inserted documents are indexed 
        Ã¢â€”Â¦ If multiple indexes are defined, the document is inserted in all of them: [2K[0G        Ã¢Å“â€œ If multiple indexes are defined, the document is inserted in all of them 
        Ã¢â€”Â¦ Can insert two docs at the same key for a non unique index: [2K[0G        Ã¢Å“â€œ Can insert two docs at the same key for a non unique index 
        Ã¢â€”Â¦ If the index has a unique constraint, an error is thrown if it is violated and the data is not modified: [2K[0G        Ã¢Å“â€œ If the index has a unique constraint, an error is thrown if it is violated and the data is not modified (42ms)
        Ã¢â€”Â¦ If an index has a unique constraint, other indexes cannot be modified when it raises an error: [2K[0G        Ã¢Å“â€œ If an index has a unique constraint, other indexes cannot be modified when it raises an error 
        Ã¢â€”Â¦ Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse: [2K[0G        Ã¢Å“â€œ Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse 
        Ã¢â€”Â¦ Insertion still works as before with indexing: [2K[0G        Ã¢Å“â€œ Insertion still works as before with indexing 
        Ã¢â€”Â¦ All indexes point to the same data as the main index on _id: [2K[0G        Ã¢Å“â€œ All indexes point to the same data as the main index on _id 
        Ã¢â€”Â¦ If a unique constraint is violated, no index is changed, including the main one: [2K[0G        Ã¢Å“â€œ If a unique constraint is violated, no index is changed, including the main one 
      Updating indexes upon document update
        Ã¢â€”Â¦ Updating docs still works as before with indexing: [2K[0G        Ã¢Å“â€œ Updating docs still works as before with indexing (54ms)
        Ã¢â€”Â¦ Indexes get updated when a document (or multiple documents) is updated: [2K[0G        Ã¢Å“â€œ Indexes get updated when a document (or multiple documents) is updated (70ms)
        Ã¢â€”Â¦ If a simple update violates a contraint, all changes are rolled back and an error is thrown: [2K[0G        Ã¢Å“â€œ If a simple update violates a contraint, all changes are rolled back and an error is thrown (76ms)
        Ã¢â€”Â¦ If a multi update violates a contraint, all changes are rolled back and an error is thrown: [2K[0G        Ã¢Å“â€œ If a multi update violates a contraint, all changes are rolled back and an error is thrown (86ms)
      Updating indexes upon document remove
        Ã¢â€”Â¦ Removing docs still works as before with indexing: [2K[0G        Ã¢Å“â€œ Removing docs still works as before with indexing (49ms)
        Ã¢â€”Â¦ Indexes get updated when a document (or multiple documents) is removed: [2K[0G        Ã¢Å“â€œ Indexes get updated when a document (or multiple documents) is removed (59ms)
      Persisting indexes
        Ã¢â€”Â¦ Indexes are persisted to a separate file and recreated upon reload: [2K[0G        Ã¢Å“â€œ Indexes are persisted to a separate file and recreated upon reload (363ms)
        Ã¢â€”Â¦ Indexes are persisted with their options and recreated even if some db operation happen between loads: [2K[0G        Ã¢Å“â€œ Indexes are persisted with their options and recreated even if some db operation happen between loads (418ms)
        Ã¢â€”Â¦ Indexes can also be removed and the remove persisted: [2K[0G        Ã¢Å“â€œ Indexes can also be removed and the remove persisted (495ms)
    Autoloading
      Ã¢â€”Â¦ Can autoload a database and query it right away: [2K[0G      Ã¢Å“â€œ Can autoload a database and query it right away (120ms)
      Ã¢â€”Â¦ Throws if autoload fails: [2K[0G      Ã¢Å“â€œ Throws if autoload fails (99ms)
    Insert
      Ã¢â€”Â¦ Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload: [2K[0G      Ã¢Å“â€œ Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload 
      Ã¢â€”Â¦ Can insert multiple documents in the database: [2K[0G      Ã¢Å“â€œ Can insert multiple documents in the database 
      Ã¢â€”Â¦ Can insert and get back from DB complex objects with all primitive and secondary types: [2K[0G      Ã¢Å“â€œ Can insert and get back from DB complex objects with all primitive and secondary types 
      Ã¢â€”Â¦ If an object returned from the DB is modified and refetched, the original value should be found: [2K[0G      Ã¢Å“â€œ If an object returned from the DB is modified and refetched, the original value should be found 
      Ã¢â€”Â¦ Cannot insert a doc that has a field beginning with a $ sign: [2K[0G      Ã¢Å“â€œ Cannot insert a doc that has a field beginning with a $ sign 
      Ã¢â€”Â¦ If an _id is already given when we insert a document, use that instead of generating a random one: [2K[0G      Ã¢Å“â€œ If an _id is already given when we insert a document, use that instead of generating a random one 
      Ã¢â€”Â¦ Modifying the insertedDoc after an insert doesnt change the copy saved in the database: [2K[0G      Ã¢Å“â€œ Modifying the insertedDoc after an insert doesnt change the copy saved in the database 
      Ã¢â€”Â¦ Can insert an array of documents at once: [2K[0G      Ã¢Å“â€œ Can insert an array of documents at once 
      Ã¢â€”Â¦ If a bulk insert violates a constraint, all changes are rolled back: [2K[0G      Ã¢Å“â€œ If a bulk insert violates a constraint, all changes are rolled back 
      Ã¢â€”Â¦ If timestampData option is set, a createdAt field is added and persisted: [2K[0G      6) If timestampData option is set, a createdAt field is added and persisted
      Ã¢â€”Â¦ If timestampData option not set, don't create a createdAt and a updatedAt field: [2K[0G      Ã¢Å“â€œ If timestampData option not set, don't create a createdAt and a updatedAt field 
      Ã¢â€”Â¦ If timestampData is set but createdAt is specified by user, don't change it: [2K[0G      7) If timestampData is set but createdAt is specified by user, don't change it
      Ã¢â€”Â¦ If timestampData is set but updatedAt is specified by user, don't change it: [2K[0G      8) If timestampData is set but updatedAt is specified by user, don't change it
      Ã¢â€”Â¦ Can insert a doc with id 0: [2K[0G      Ã¢Å“â€œ Can insert a doc with id 0 
      Ã¢â€”Â¦ If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern: [2K[0G      Ã¢Å“â€œ If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern 
    #getCandidates
      Ã¢â€”Â¦ Can use an index to get docs with a basic match: [2K[0G      Ã¢Å“â€œ Can use an index to get docs with a basic match 
      Ã¢â€”Â¦ Can use an index to get docs with a $in match: [2K[0G      Ã¢Å“â€œ Can use an index to get docs with a $in match (38ms)
      Ã¢â€”Â¦ If no index can be used, return the whole database: [2K[0G      Ã¢Å“â€œ If no index can be used, return the whole database (40ms)
      Ã¢â€”Â¦ Can use indexes for comparison matches: [2K[0G      Ã¢Å“â€œ Can use indexes for comparison matches (38ms)
      Ã¢â€”Â¦ Can set a TTL index that expires documents: [2K[0G      Ã¢Å“â€œ Can set a TTL index that expires documents (392ms)
      Ã¢â€”Â¦ TTL indexes can expire multiple documents and only what needs to be expired: [2K[0G      Ã¢Å“â€œ TTL indexes can expire multiple documents and only what needs to be expired (379ms)
      Ã¢â€”Â¦ Document where indexed field is absent or not a date are ignored: [2K[0G      Ã¢Å“â€œ Document where indexed field is absent or not a date are ignored (252ms)
    Find
      Ã¢â€”Â¦ Can find all documents if an empty query is used: [2K[0G      Ã¢Å“â€œ Can find all documents if an empty query is used 
      Ã¢â€”Â¦ Can find all documents matching a basic query: [2K[0G      Ã¢Å“â€œ Can find all documents matching a basic query (38ms)
      Ã¢â€”Â¦ Can find one document matching a basic query and return null if none is found: [2K[0G      Ã¢Å“â€œ Can find one document matching a basic query and return null if none is found 
      Ã¢â€”Â¦ Can find dates and objects (non JS-native types): [2K[0G      Ã¢Å“â€œ Can find dates and objects (non JS-native types) 
      Ã¢â€”Â¦ Can use dot-notation to query subfields: [2K[0G      Ã¢Å“â€œ Can use dot-notation to query subfields 
      Ã¢â€”Â¦ Array fields match if any element matches: [2K[0G      Ã¢Å“â€œ Array fields match if any element matches (67ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ Changing the documents returned by find or findOne do not change the database state: [2K[0G      Ã¢Å“â€œ Changing the documents returned by find or findOne do not change the database state 
      Ã¢â€”Â¦ Can use sort, skip and limit if the callback is not passed to find but to exec: [2K[0G      Ã¢Å“â€œ Can use sort, skip and limit if the callback is not passed to find but to exec (43ms)
      Ã¢â€”Â¦ Can use sort and skip if the callback is not passed to findOne but to exec: [2K[0G      Ã¢Å“â€œ Can use sort and skip if the callback is not passed to findOne but to exec (80ms)
      Ã¢â€”Â¦ Can use projections in find, normal or cursor way: [2K[0G      Ã¢Å“â€œ Can use projections in find, normal or cursor way (46ms)
      Ã¢â€”Â¦ Can use projections in findOne, normal or cursor way: [2K[0G      Ã¢Å“â€œ Can use projections in findOne, normal or cursor way (45ms)
    Count
      Ã¢â€”Â¦ Count all documents if an empty query is used: [2K[0G      Ã¢Å“â€œ Count all documents if an empty query is used 
      Ã¢â€”Â¦ Count all documents matching a basic query: [2K[0G      Ã¢Å“â€œ Count all documents matching a basic query 
      Ã¢â€”Â¦ Array fields match if any element matches: [2K[0G      Ã¢Å“â€œ Array fields match if any element matches (59ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
    Update
      Ã¢â€”Â¦ If the query doesn't match anything, database is not modified: [2K[0G      Ã¢Å“â€œ If the query doesn't match anything, database is not modified (39ms)
      Ã¢â€”Â¦ If timestampData option is set, update the updatedAt field: [2K[0G      9) If timestampData option is set, update the updatedAt field
      Ã¢â€”Â¦ Can update multiple documents matching the query: [2K[0G      Ã¢Å“â€œ Can update multiple documents matching the query (83ms)
      Ã¢â€”Â¦ Can update only one document matching the query: [2K[0G      Ã¢Å“â€œ Can update only one document matching the query (75ms)
      Ã¢â€”Â¦ Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields: [2K[0G      Ã¢Å“â€œ Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields 
      Ã¢â€”Â¦ Can update documents using multiple modifiers: [2K[0G      Ã¢Å“â€œ Can update documents using multiple modifiers 
      Ã¢â€”Â¦ Can upsert a document even with modifiers: [2K[0G      Ã¢Å“â€œ Can upsert a document even with modifiers 
      Ã¢â€”Â¦ When using modifiers, the only way to update subdocs is with the dot-notation: [2K[0G      Ã¢Å“â€œ When using modifiers, the only way to update subdocs is with the dot-notation 
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ If an error is thrown by a modifier, the database state is not changed: [2K[0G      Ã¢Å“â€œ If an error is thrown by a modifier, the database state is not changed 
      Ã¢â€”Â¦ Cant change the _id of a document: [2K[0G      Ã¢Å“â€œ Cant change the _id of a document 
      Ã¢â€”Â¦ Non-multi updates are persistent: [2K[0G      Ã¢Å“â€œ Non-multi updates are persistent (63ms)
      Ã¢â€”Â¦ Multi updates are persistent: [2K[0G      Ã¢Å“â€œ Multi updates are persistent (92ms)
      Ã¢â€”Â¦ Can update without the options arg (will use defaults then): [2K[0G      Ã¢Å“â€œ Can update without the options arg (will use defaults then) (42ms)
      Ã¢â€”Â¦ If a multi update fails on one document, previous updates should be rolled back: [2K[0G      Ã¢Å“â€œ If a multi update fails on one document, previous updates should be rolled back (41ms)
      Ã¢â€”Â¦ If an index constraint is violated by an update, all changes should be rolled back: [2K[0G      Ã¢Å“â€œ If an index constraint is violated by an update, all changes should be rolled back (45ms)
      Ã¢â€”Â¦ If options.returnUpdatedDocs is true, return all matched docs: [2K[0G      Ã¢Å“â€œ If options.returnUpdatedDocs is true, return all matched docs (65ms)
      Ã¢â€”Â¦ createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement: [2K[0G      10) createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement
      Upserts
        Ã¢â€”Â¦ Can perform upserts if needed: [2K[0G        Ã¢Å“â€œ Can perform upserts if needed 
        Ã¢â€”Â¦ If the update query is a normal object with no modifiers, it is the doc that will be upserted: [2K[0G        Ã¢Å“â€œ If the update query is a normal object with no modifiers, it is the doc that will be upserted 
        Ã¢â€”Â¦ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1: [2K[0G        Ã¢Å“â€œ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1 
        Ã¢â€”Â¦ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2: [2K[0G        Ã¢Å“â€œ If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2 
        Ã¢â€”Â¦ Performing upsert with badly formatted fields yields a standard error not an exception: [2K[0G        Ã¢Å“â€œ Performing upsert with badly formatted fields yields a standard error not an exception 
      Callback signature
        Ã¢â€”Â¦ Regular update, multi false: [2K[0G        Ã¢Å“â€œ Regular update, multi false 
        Ã¢â€”Â¦ Regular update, multi true: [2K[0G        Ã¢Å“â€œ Regular update, multi true (45ms)
        Ã¢â€”Â¦ Upsert: [2K[0G        Ã¢Å“â€œ Upsert (48ms)
    Remove
      Ã¢â€”Â¦ Can remove multiple documents: [2K[0G      Ã¢Å“â€œ Can remove multiple documents (76ms)
      Ã¢â€”Â¦ Remove can be called multiple times in parallel and everything that needs to be removed will be: [2K[0G      Ã¢Å“â€œ Remove can be called multiple times in parallel and everything that needs to be removed will be (45ms)
      Ã¢â€”Â¦ Returns an error if the query is not well formed: [2K[0G      Ã¢Å“â€œ Returns an error if the query is not well formed 
      Ã¢â€”Â¦ Non-multi removes are persistent: [2K[0G      Ã¢Å“â€œ Non-multi removes are persistent (68ms)
      Ã¢â€”Â¦ Multi removes are persistent: [2K[0G      Ã¢Å“â€œ Multi removes are persistent (66ms)
      Ã¢â€”Â¦ Can remove without the options arg (will use defaults then): [2K[0G      Ã¢Å“â€œ Can remove without the options arg (will use defaults then) (38ms)
    Using indexes
      Ã¢â€”Â¦ Results of getMatching should never contain duplicates: [2K[0G      Ã¢Å“â€œ Results of getMatching should never contain duplicates 
      ensureIndex and index initialization in database loading
        Ã¢â€”Â¦ ensureIndex can be called right after a loadDatabase and be initialized and filled correctly: [2K[0G        Ã¢Å“â€œ ensureIndex can be called right after a loadDatabase and be initialized and filled correctly (40ms)
        Ã¢â€”Â¦ ensureIndex can be called twice on the same field, the second call will ahve no effect: [2K[0G        Ã¢Å“â€œ ensureIndex can be called twice on the same field, the second call will ahve no effect 
        Ã¢â€”Â¦ ensureIndex can be called after the data set was modified and the index still be correct: [2K[0G        Ã¢Å“â€œ ensureIndex can be called after the data set was modified and the index still be correct (87ms)
        Ã¢â€”Â¦ ensureIndex can be called before a loadDatabase and still be initialized and filled correctly: [2K[0G        Ã¢Å“â€œ ensureIndex can be called before a loadDatabase and still be initialized and filled correctly (40ms)
        Ã¢â€”Â¦ Can initialize multiple indexes on a database load: [2K[0G        Ã¢Å“â€œ Can initialize multiple indexes on a database load (55ms)
        Ã¢â€”Â¦ If a unique constraint is not respected, database loading will not work and no data will be inserted: [2K[0G        Ã¢Å“â€œ If a unique constraint is not respected, database loading will not work and no data will be inserted 
        Ã¢â€”Â¦ If a unique constraint is not respected, ensureIndex will return an error and not create an index: [2K[0G        Ã¢Å“â€œ If a unique constraint is not respected, ensureIndex will return an error and not create an index 
        Ã¢â€”Â¦ Can remove an index: [2K[0G        Ã¢Å“â€œ Can remove an index 
      Indexing newly inserted documents
        Ã¢â€”Â¦ Newly inserted documents are indexed: [2K[0G        Ã¢Å“â€œ Newly inserted documents are indexed 
        Ã¢â€”Â¦ If multiple indexes are defined, the document is inserted in all of them: [2K[0G        Ã¢Å“â€œ If multiple indexes are defined, the document is inserted in all of them 
        Ã¢â€”Â¦ Can insert two docs at the same key for a non unique index: [2K[0G        Ã¢Å“â€œ Can insert two docs at the same key for a non unique index 
        Ã¢â€”Â¦ If the index has a unique constraint, an error is thrown if it is violated and the data is not modified: [2K[0G        Ã¢Å“â€œ If the index has a unique constraint, an error is thrown if it is violated and the data is not modified (41ms)
        Ã¢â€”Â¦ If an index has a unique constraint, other indexes cannot be modified when it raises an error: [2K[0G        Ã¢Å“â€œ If an index has a unique constraint, other indexes cannot be modified when it raises an error 
        Ã¢â€”Â¦ Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse: [2K[0G        Ã¢Å“â€œ Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse 
        Ã¢â€”Â¦ Insertion still works as before with indexing: [2K[0G        Ã¢Å“â€œ Insertion still works as before with indexing 
        Ã¢â€”Â¦ All indexes point to the same data as the main index on _id: [2K[0G        Ã¢Å“â€œ All indexes point to the same data as the main index on _id 
        Ã¢â€”Â¦ If a unique constraint is violated, no index is changed, including the main one: [2K[0G        Ã¢Å“â€œ If a unique constraint is violated, no index is changed, including the main one 
      Updating indexes upon document update
        Ã¢â€”Â¦ Updating docs still works as before with indexing: [2K[0G        Ã¢Å“â€œ Updating docs still works as before with indexing (54ms)
        Ã¢â€”Â¦ Indexes get updated when a document (or multiple documents) is updated: [2K[0G        Ã¢Å“â€œ Indexes get updated when a document (or multiple documents) is updated (69ms)
        Ã¢â€”Â¦ If a simple update violates a contraint, all changes are rolled back and an error is thrown: [2K[0G        Ã¢Å“â€œ If a simple update violates a contraint, all changes are rolled back and an error is thrown (68ms)
        Ã¢â€”Â¦ If a multi update violates a contraint, all changes are rolled back and an error is thrown: [2K[0G        Ã¢Å“â€œ If a multi update violates a contraint, all changes are rolled back and an error is thrown (82ms)
      Updating indexes upon document remove
        Ã¢â€”Â¦ Removing docs still works as before with indexing: [2K[0G        Ã¢Å“â€œ Removing docs still works as before with indexing (72ms)
        Ã¢â€”Â¦ Indexes get updated when a document (or multiple documents) is removed: [2K[0G        Ã¢Å“â€œ Indexes get updated when a document (or multiple documents) is removed (59ms)
      Persisting indexes
        Ã¢â€”Â¦ Indexes are persisted to a separate file and recreated upon reload: [2K[0G        Ã¢Å“â€œ Indexes are persisted to a separate file and recreated upon reload (361ms)
        Ã¢â€”Â¦ Indexes are persisted with their options and recreated even if some db operation happen between loads: [2K[0G        Ã¢Å“â€œ Indexes are persisted with their options and recreated even if some db operation happen between loads (393ms)
        Ã¢â€”Â¦ Indexes can also be removed and the remove persisted: [2K[0G        Ã¢Å“â€œ Indexes can also be removed and the remove persisted (508ms)

  Executor
    With persistent database
      Ã¢â€”Â¦ A throw in a callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A throw in a callback doesnt prevent execution of next operations 
      Ã¢â€”Â¦ A falsy callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A falsy callback doesnt prevent execution of next operations 
      Ã¢â€”Â¦ Operations are executed in the right order: [2K[0G      Ã¢Å“â€œ Operations are executed in the right order 
      Ã¢â€”Â¦ Does not starve event loop and raise warning when more than 1000 callbacks are in queue: [2K[0G      Ã¢Å“â€œ Does not starve event loop and raise warning when more than 1000 callbacks are in queue (567ms)
      Ã¢â€”Â¦ Works in the right order even with no supplied callback: [2K[0G      Ã¢Å“â€œ Works in the right order even with no supplied callback 
      Ã¢â€”Â¦ A throw in a callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A throw in a callback doesnt prevent execution of next operations 
      Ã¢â€”Â¦ A falsy callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A falsy callback doesnt prevent execution of next operations (58ms)
      Ã¢â€”Â¦ Operations are executed in the right order: [2K[0G      Ã¢Å“â€œ Operations are executed in the right order (60ms)
      Ã¢â€”Â¦ Does not starve event loop and raise warning when more than 1000 callbacks are in queue: [2K[0G      Ã¢Å“â€œ Does not starve event loop and raise warning when more than 1000 callbacks are in queue (559ms)
      Ã¢â€”Â¦ Works in the right order even with no supplied callback: [2K[0G      Ã¢Å“â€œ Works in the right order even with no supplied callback (48ms)
    With non persistent database
      Ã¢â€”Â¦ A throw in a callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A throw in a callback doesnt prevent execution of next operations 
      Ã¢â€”Â¦ A falsy callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A falsy callback doesnt prevent execution of next operations (55ms)
      Ã¢â€”Â¦ Operations are executed in the right order: [2K[0G      Ã¢Å“â€œ Operations are executed in the right order (80ms)
      Ã¢â€”Â¦ Works in the right order even with no supplied callback: [2K[0G      Ã¢Å“â€œ Works in the right order even with no supplied callback 
      Ã¢â€”Â¦ A throw in a callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A throw in a callback doesnt prevent execution of next operations 
      Ã¢â€”Â¦ A falsy callback doesnt prevent execution of next operations: [2K[0G      Ã¢Å“â€œ A falsy callback doesnt prevent execution of next operations (58ms)
      Ã¢â€”Â¦ Operations are executed in the right order: [2K[0G      Ã¢Å“â€œ Operations are executed in the right order (70ms)
      Ã¢â€”Â¦ Works in the right order even with no supplied callback: [2K[0G      Ã¢Å“â€œ Works in the right order even with no supplied callback 

  Indexes
    Ã¢â€”Â¦ Get all elements in the index: [2K[0G    Ã¢Å“â€œ Get all elements in the index 
    Insertion
      Ã¢â€”Â¦ Can insert pointers to documents in the index correctly when they have the field: [2K[0G      Ã¢Å“â€œ Can insert pointers to documents in the index correctly when they have the field 
      Ã¢â€”Â¦ Inserting twice for the same fieldName in a unique index will result in an error thrown: [2K[0G      Ã¢Å“â€œ Inserting twice for the same fieldName in a unique index will result in an error thrown 
      Ã¢â€”Â¦ Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown: [2K[0G      Ã¢Å“â€œ Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown 
      Ã¢â€”Â¦ Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed: [2K[0G      Ã¢Å“â€œ Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed 
      Ã¢â€”Â¦ Works with dot notation: [2K[0G      Ã¢Å“â€œ Works with dot notation 
      Ã¢â€”Â¦ Can insert an array of documents: [2K[0G      Ã¢Å“â€œ Can insert an array of documents 
      Ã¢â€”Â¦ When inserting an array of elements, if an error is thrown all inserts need to be rolled back: [2K[0G      Ã¢Å“â€œ When inserting an array of elements, if an error is thrown all inserts need to be rolled back 
      Array fields
        Ã¢â€”Â¦ Inserts one entry per array element in the index: [2K[0G        Ã¢Å“â€œ Inserts one entry per array element in the index 
        Ã¢â€”Â¦ Inserts one entry per array element in the index, type-checked: [2K[0G        Ã¢Å“â€œ Inserts one entry per array element in the index, type-checked 
        Ã¢â€”Â¦ Inserts one entry per unique array element in the index, the unique constraint only holds across documents: [2K[0G        Ã¢Å“â€œ Inserts one entry per unique array element in the index, the unique constraint only holds across documents 
        Ã¢â€”Â¦ The unique constraint holds across documents: [2K[0G        Ã¢Å“â€œ The unique constraint holds across documents 
        Ã¢â€”Â¦ When removing a document, remove it from the index at all unique array elements: [2K[0G        Ã¢Å“â€œ When removing a document, remove it from the index at all unique array elements 
        Ã¢â€”Â¦ If a unique constraint is violated when inserting an array key, roll back all inserts before the key: [2K[0G        Ã¢Å“â€œ If a unique constraint is violated when inserting an array key, roll back all inserts before the key 
    Removal
      Ã¢â€”Â¦ Can remove pointers from the index, even when multiple documents have the same key: [2K[0G      Ã¢Å“â€œ Can remove pointers from the index, even when multiple documents have the same key 
      Ã¢â€”Â¦ If we have a sparse index, removing a non indexed doc has no effect: [2K[0G      Ã¢Å“â€œ If we have a sparse index, removing a non indexed doc has no effect 
      Ã¢â€”Â¦ Works with dot notation: [2K[0G      Ã¢Å“â€œ Works with dot notation 
      Ã¢â€”Â¦ Can remove an array of documents: [2K[0G      Ã¢Å“â€œ Can remove an array of documents 
    Update
      Ã¢â€”Â¦ Can update a document whose key did or didnt change: [2K[0G      Ã¢Å“â€œ Can update a document whose key did or didnt change 
      Ã¢â€”Â¦ If a simple update violates a unique constraint, changes are rolled back and an error thrown: [2K[0G      Ã¢Å“â€œ If a simple update violates a unique constraint, changes are rolled back and an error thrown 
      Ã¢â€”Â¦ Can update an array of documents: [2K[0G      Ã¢Å“â€œ Can update an array of documents 
      Ã¢â€”Â¦ If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown: [2K[0G      Ã¢Å“â€œ If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown 
      Ã¢â€”Â¦ If an update doesnt change a document, the unique constraint is not violated: [2K[0G      Ã¢Å“â€œ If an update doesnt change a document, the unique constraint is not violated 
      Ã¢â€”Â¦ Can revert simple and batch updates: [2K[0G      Ã¢Å“â€œ Can revert simple and batch updates 
    Get matching documents
      Ã¢â€”Â¦ Get all documents where fieldName is equal to the given value, or an empty array if no match: [2K[0G      Ã¢Å“â€œ Get all documents where fieldName is equal to the given value, or an empty array if no match 
      Ã¢â€”Â¦ Can get all documents for a given key in a unique index: [2K[0G      Ã¢Å“â€œ Can get all documents for a given key in a unique index 
      Ã¢â€”Â¦ Can get all documents for which a field is undefined: [2K[0G      Ã¢Å“â€œ Can get all documents for which a field is undefined 
      Ã¢â€”Â¦ Can get all documents for which a field is null: [2K[0G      Ã¢Å“â€œ Can get all documents for which a field is null 
      Ã¢â€”Â¦ Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined): [2K[0G      Ã¢Å“â€œ Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined) 
      Ã¢â€”Â¦ Can get all documents whose key is in an array of keys: [2K[0G      Ã¢Å“â€œ Can get all documents whose key is in an array of keys 
      Ã¢â€”Â¦ Can get all documents whose key is between certain bounds: [2K[0G      Ã¢Å“â€œ Can get all documents whose key is between certain bounds 
    Resetting
      Ã¢â€”Â¦ Can reset an index without any new data, the index will be empty afterwards: [2K[0G      Ã¢Å“â€œ Can reset an index without any new data, the index will be empty afterwards 
      Ã¢â€”Â¦ Can reset an index and initialize it with one document: [2K[0G      Ã¢Å“â€œ Can reset an index and initialize it with one document 
      Ã¢â€”Â¦ Can reset an index and initialize it with an array of documents: [2K[0G      Ã¢Å“â€œ Can reset an index and initialize it with an array of documents 

  Indexes
    Ã¢â€”Â¦ Get all elements in the index: [2K[0G    Ã¢Å“â€œ Get all elements in the index 
    Insertion
      Ã¢â€”Â¦ Can insert pointers to documents in the index correctly when they have the field: [2K[0G      Ã¢Å“â€œ Can insert pointers to documents in the index correctly when they have the field 
      Ã¢â€”Â¦ Inserting twice for the same fieldName in a unique index will result in an error thrown: [2K[0G      Ã¢Å“â€œ Inserting twice for the same fieldName in a unique index will result in an error thrown 
      Ã¢â€”Â¦ Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown: [2K[0G      Ã¢Å“â€œ Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown 
      Ã¢â€”Â¦ Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed: [2K[0G      Ã¢Å“â€œ Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed 
      Ã¢â€”Â¦ Works with dot notation: [2K[0G      Ã¢Å“â€œ Works with dot notation 
      Ã¢â€”Â¦ Can insert an array of documents: [2K[0G      Ã¢Å“â€œ Can insert an array of documents 
      Ã¢â€”Â¦ When inserting an array of elements, if an error is thrown all inserts need to be rolled back: [2K[0G      Ã¢Å“â€œ When inserting an array of elements, if an error is thrown all inserts need to be rolled back 
      Array fields
        Ã¢â€”Â¦ Inserts one entry per array element in the index: [2K[0G        Ã¢Å“â€œ Inserts one entry per array element in the index 
        Ã¢â€”Â¦ Inserts one entry per array element in the index, type-checked: [2K[0G        Ã¢Å“â€œ Inserts one entry per array element in the index, type-checked 
        Ã¢â€”Â¦ Inserts one entry per unique array element in the index, the unique constraint only holds across documents: [2K[0G        Ã¢Å“â€œ Inserts one entry per unique array element in the index, the unique constraint only holds across documents 
        Ã¢â€”Â¦ The unique constraint holds across documents: [2K[0G        Ã¢Å“â€œ The unique constraint holds across documents 
        Ã¢â€”Â¦ When removing a document, remove it from the index at all unique array elements: [2K[0G        Ã¢Å“â€œ When removing a document, remove it from the index at all unique array elements 
        Ã¢â€”Â¦ If a unique constraint is violated when inserting an array key, roll back all inserts before the key: [2K[0G        Ã¢Å“â€œ If a unique constraint is violated when inserting an array key, roll back all inserts before the key 
    Removal
      Ã¢â€”Â¦ Can remove pointers from the index, even when multiple documents have the same key: [2K[0G      Ã¢Å“â€œ Can remove pointers from the index, even when multiple documents have the same key 
      Ã¢â€”Â¦ If we have a sparse index, removing a non indexed doc has no effect: [2K[0G      Ã¢Å“â€œ If we have a sparse index, removing a non indexed doc has no effect 
      Ã¢â€”Â¦ Works with dot notation: [2K[0G      Ã¢Å“â€œ Works with dot notation 
      Ã¢â€”Â¦ Can remove an array of documents: [2K[0G      Ã¢Å“â€œ Can remove an array of documents 
    Update
      Ã¢â€”Â¦ Can update a document whose key did or didnt change: [2K[0G      Ã¢Å“â€œ Can update a document whose key did or didnt change 
      Ã¢â€”Â¦ If a simple update violates a unique constraint, changes are rolled back and an error thrown: [2K[0G      Ã¢Å“â€œ If a simple update violates a unique constraint, changes are rolled back and an error thrown 
      Ã¢â€”Â¦ Can update an array of documents: [2K[0G      Ã¢Å“â€œ Can update an array of documents 
      Ã¢â€”Â¦ If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown: [2K[0G      Ã¢Å“â€œ If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown 
      Ã¢â€”Â¦ If an update doesnt change a document, the unique constraint is not violated: [2K[0G      Ã¢Å“â€œ If an update doesnt change a document, the unique constraint is not violated 
      Ã¢â€”Â¦ Can revert simple and batch updates: [2K[0G      Ã¢Å“â€œ Can revert simple and batch updates 
    Get matching documents
      Ã¢â€”Â¦ Get all documents where fieldName is equal to the given value, or an empty array if no match: [2K[0G      Ã¢Å“â€œ Get all documents where fieldName is equal to the given value, or an empty array if no match 
      Ã¢â€”Â¦ Can get all documents for a given key in a unique index: [2K[0G      Ã¢Å“â€œ Can get all documents for a given key in a unique index 
      Ã¢â€”Â¦ Can get all documents for which a field is undefined: [2K[0G      Ã¢Å“â€œ Can get all documents for which a field is undefined 
      Ã¢â€”Â¦ Can get all documents for which a field is null: [2K[0G      Ã¢Å“â€œ Can get all documents for which a field is null 
      Ã¢â€”Â¦ Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined): [2K[0G      Ã¢Å“â€œ Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined) 
      Ã¢â€”Â¦ Can get all documents whose key is in an array of keys: [2K[0G      Ã¢Å“â€œ Can get all documents whose key is in an array of keys 
      Ã¢â€”Â¦ Can get all documents whose key is between certain bounds: [2K[0G      Ã¢Å“â€œ Can get all documents whose key is between certain bounds 
    Resetting
      Ã¢â€”Â¦ Can reset an index without any new data, the index will be empty afterwards: [2K[0G      Ã¢Å“â€œ Can reset an index without any new data, the index will be empty afterwards 
      Ã¢â€”Â¦ Can reset an index and initialize it with one document: [2K[0G      Ã¢Å“â€œ Can reset an index and initialize it with one document 
      Ã¢â€”Â¦ Can reset an index and initialize it with an array of documents: [2K[0G      Ã¢Å“â€œ Can reset an index and initialize it with an array of documents 

  Model
    Serialization, deserialization
      Ã¢â€”Â¦ Can serialize and deserialize strings: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize strings 
      Ã¢â€”Â¦ Can serialize and deserialize booleans: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize booleans 
      Ã¢â€”Â¦ Can serialize and deserialize numbers: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize numbers 
      Ã¢â€”Â¦ Can serialize and deserialize null: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize null 
      Ã¢â€”Â¦ undefined fields are removed when serialized: [2K[0G      Ã¢Å“â€œ undefined fields are removed when serialized 
      Ã¢â€”Â¦ Can serialize and deserialize a date: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize a date 
      Ã¢â€”Â¦ Can serialize and deserialize sub objects: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize sub objects 
      Ã¢â€”Â¦ Can serialize and deserialize sub arrays: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize sub arrays 
      Ã¢â€”Â¦ Reject field names beginning with a $ sign or containing a dot, except the four edge cases: [2K[0G      Ã¢Å“â€œ Reject field names beginning with a $ sign or containing a dot, except the four edge cases 
      Ã¢â€”Â¦ Can serialize string fields with a new line without breaking the DB: [2K[0G      Ã¢Å“â€œ Can serialize string fields with a new line without breaking the DB (370ms)
      Ã¢â€”Â¦ Can accept objects whose keys are numbers: [2K[0G      Ã¢Å“â€œ Can accept objects whose keys are numbers 
    Object checking
      Ã¢â€”Â¦ Field names beginning with a $ sign are forbidden: [2K[0G      Ã¢Å“â€œ Field names beginning with a $ sign are forbidden 
      Ã¢â€”Â¦ Field names cannot contain a .: [2K[0G      Ã¢Å“â€œ Field names cannot contain a . 
      Ã¢â€”Â¦ Properties with a null value dont trigger an error: [2K[0G      Ã¢Å“â€œ Properties with a null value dont trigger an error 
      Ã¢â€”Â¦ Can check if an object is a primitive or not: [2K[0G      Ã¢Å“â€œ Can check if an object is a primitive or not 
    Deep copying
      Ã¢â€”Â¦ Should be able to deep copy any serializable model: [2K[0G      Ã¢Å“â€œ Should be able to deep copy any serializable model 
      Ã¢â€”Â¦ Should deep copy the contents of an array: [2K[0G      Ã¢Å“â€œ Should deep copy the contents of an array 
      Ã¢â€”Â¦ Without the strictKeys option, everything gets deep copied: [2K[0G      Ã¢Å“â€œ Without the strictKeys option, everything gets deep copied 
      Ã¢â€”Â¦ With the strictKeys option, only valid keys gets deep copied: [2K[0G      Ã¢Å“â€œ With the strictKeys option, only valid keys gets deep copied 
    Modifying documents
      Ã¢â€”Â¦ Queries not containing any modifier just replace the document by the contents of the query but keep its _id: [2K[0G      Ã¢Å“â€œ Queries not containing any modifier just replace the document by the contents of the query but keep its _id 
      Ã¢â€”Â¦ Throw an error if trying to change the _id field in a copy-type modification: [2K[0G      Ã¢Å“â€œ Throw an error if trying to change the _id field in a copy-type modification 
      Ã¢â€”Â¦ Throw an error if trying to use modify in a mixed copy+modify way: [2K[0G      Ã¢Å“â€œ Throw an error if trying to use modify in a mixed copy+modify way 
      Ã¢â€”Â¦ Throw an error if trying to use an inexistent modifier: [2K[0G      Ã¢Å“â€œ Throw an error if trying to use an inexistent modifier 
      Ã¢â€”Â¦ Throw an error if a modifier is used with a non-object argument: [2K[0G      Ã¢Å“â€œ Throw an error if a modifier is used with a non-object argument 
      $set modifier
        Ã¢â€”Â¦ Can change already set fields without modfifying the underlying object: [2K[0G        Ã¢Å“â€œ Can change already set fields without modfifying the underlying object 
        Ã¢â€”Â¦ Creates fields to set if they dont exist yet: [2K[0G        Ã¢Å“â€œ Creates fields to set if they dont exist yet 
        Ã¢â€”Â¦ Can set sub-fields and create them if necessary: [2K[0G        Ã¢Å“â€œ Can set sub-fields and create them if necessary 
        Ã¢â€”Â¦ Doesn't replace a falsy field by an object when recursively following dot notation: [2K[0G        Ã¢Å“â€œ Doesn't replace a falsy field by an object when recursively following dot notation 
      $unset modifier
        Ã¢â€”Â¦ Can delete a field, not throwing an error if the field doesnt exist: [2K[0G        Ã¢Å“â€œ Can delete a field, not throwing an error if the field doesnt exist 
        Ã¢â€”Â¦ Can unset sub-fields and entire nested documents: [2K[0G        Ã¢Å“â€œ Can unset sub-fields and entire nested documents 
        Ã¢â€”Â¦ When unsetting nested fields, should not create an empty parent to nested field: [2K[0G        Ã¢Å“â€œ When unsetting nested fields, should not create an empty parent to nested field 
      $inc modifier
        Ã¢â€”Â¦ Throw an error if you try to use it with a non-number or on a non number field: [2K[0G        Ã¢Å“â€œ Throw an error if you try to use it with a non-number or on a non number field 
        Ã¢â€”Â¦ Can increment number fields or create and initialize them if needed: [2K[0G        Ã¢Å“â€œ Can increment number fields or create and initialize them if needed 
        Ã¢â€”Â¦ Works recursively: [2K[0G        Ã¢Å“â€œ Works recursively 
      $push modifier
        Ã¢â€”Â¦ Can push an element to the end of an array: [2K[0G        Ã¢Å“â€œ Can push an element to the end of an array 
        Ã¢â€”Â¦ Can push an element to a non-existent field and will create the array: [2K[0G        Ã¢Å“â€œ Can push an element to a non-existent field and will create the array 
        Ã¢â€”Â¦ Can push on nested fields: [2K[0G        Ã¢Å“â€œ Can push on nested fields 
        Ã¢â€”Â¦ Throw if we try to push to a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to push to a non-array 
        Ã¢â€”Â¦ Can use the $each modifier to add multiple values to an array at once: [2K[0G        Ã¢Å“â€œ Can use the $each modifier to add multiple values to an array at once 
        Ã¢â€”Â¦ Can use the $slice modifier to limit the number of array elements: [2K[0G        Ã¢Å“â€œ Can use the $slice modifier to limit the number of array elements 
      $addToSet modifier
        Ã¢â€”Â¦ Can add an element to a set: [2K[0G        Ã¢Å“â€œ Can add an element to a set 
        Ã¢â€”Â¦ Can add an element to a non-existent set and will create the array: [2K[0G        Ã¢Å“â€œ Can add an element to a non-existent set and will create the array 
        Ã¢â€”Â¦ Throw if we try to addToSet to a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to addToSet to a non-array 
        Ã¢â€”Â¦ Use deep-equality to check whether we can add a value to a set: [2K[0G        Ã¢Å“â€œ Use deep-equality to check whether we can add a value to a set 
        Ã¢â€”Â¦ Can use the $each modifier to add multiple values to a set at once: [2K[0G        Ã¢Å“â€œ Can use the $each modifier to add multiple values to a set at once 
      $pop modifier
        Ã¢â€”Â¦ Throw if called on a non array, a non defined field or a non integer: [2K[0G        Ã¢Å“â€œ Throw if called on a non array, a non defined field or a non integer 
        Ã¢â€”Â¦ Can remove the first and last element of an array: [2K[0G        Ã¢Å“â€œ Can remove the first and last element of an array 
      $pull modifier
        Ã¢â€”Â¦ Can remove an element from a set: [2K[0G        Ã¢Å“â€œ Can remove an element from a set 
        Ã¢â€”Â¦ Can remove multiple matching elements: [2K[0G        Ã¢Å“â€œ Can remove multiple matching elements 
        Ã¢â€”Â¦ Throw if we try to pull from a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to pull from a non-array 
        Ã¢â€”Â¦ Use deep-equality to check whether we can remove a value from a set: [2K[0G        Ã¢Å“â€œ Use deep-equality to check whether we can remove a value from a set 
        Ã¢â€”Â¦ Can use any kind of nedb query with $pull: [2K[0G        Ã¢Å“â€œ Can use any kind of nedb query with $pull 
      $max modifier
        Ã¢â€”Â¦ Will set the field to the updated value if value is greater than current one, without modifying the original object: [2K[0G        Ã¢Å“â€œ Will set the field to the updated value if value is greater than current one, without modifying the original object 
        Ã¢â€”Â¦ Will not update the field if new value is smaller than current one: [2K[0G        Ã¢Å“â€œ Will not update the field if new value is smaller than current one 
        Ã¢â€”Â¦ Will create the field if it does not exist: [2K[0G        Ã¢Å“â€œ Will create the field if it does not exist 
        Ã¢â€”Â¦ Works on embedded documents: [2K[0G        Ã¢Å“â€œ Works on embedded documents 
      $min modifier
        Ã¢â€”Â¦ Will set the field to the updated value if value is smaller than current one, without modifying the original object: [2K[0G        Ã¢Å“â€œ Will set the field to the updated value if value is smaller than current one, without modifying the original object 
        Ã¢â€”Â¦ Will not update the field if new value is greater than current one: [2K[0G        Ã¢Å“â€œ Will not update the field if new value is greater than current one 
        Ã¢â€”Â¦ Will create the field if it does not exist: [2K[0G        Ã¢Å“â€œ Will create the field if it does not exist 
        Ã¢â€”Â¦ Works on embedded documents: [2K[0G        Ã¢Å“â€œ Works on embedded documents 
    Comparing things
      Ã¢â€”Â¦ undefined is the smallest: [2K[0G      Ã¢Å“â€œ undefined is the smallest 
      Ã¢â€”Â¦ Then null: [2K[0G      Ã¢Å“â€œ Then null 
      Ã¢â€”Â¦ Then numbers: [2K[0G      Ã¢Å“â€œ Then numbers 
      Ã¢â€”Â¦ Then strings: [2K[0G      Ã¢Å“â€œ Then strings 
      Ã¢â€”Â¦ Then booleans: [2K[0G      Ã¢Å“â€œ Then booleans 
      Ã¢â€”Â¦ Then dates: [2K[0G      Ã¢Å“â€œ Then dates 
      Ã¢â€”Â¦ Then arrays: [2K[0G      Ã¢Å“â€œ Then arrays 
      Ã¢â€”Â¦ And finally objects: [2K[0G      Ã¢Å“â€œ And finally objects 
      Ã¢â€”Â¦ Can specify custom string comparison function: [2K[0G      Ã¢Å“â€œ Can specify custom string comparison function 
    Querying
      Comparing things
        Ã¢â€”Â¦ Two things of different types cannot be equal, two identical native things are equal: [2K[0G        Ã¢Å“â€œ Two things of different types cannot be equal, two identical native things are equal 
        Ã¢â€”Â¦ Can test native types null undefined string number boolean date equality: [2K[0G        Ã¢Å“â€œ Can test native types null undefined string number boolean date equality 
        Ã¢â€”Â¦ If one side is an array or undefined, comparison fails: [2K[0G        Ã¢Å“â€œ If one side is an array or undefined, comparison fails 
        Ã¢â€”Â¦ Can test objects equality: [2K[0G        Ã¢Å“â€œ Can test objects equality 
      Getting a fields value in dot notation
        Ã¢â€”Â¦ Return first-level and nested values: [2K[0G        Ã¢Å“â€œ Return first-level and nested values 
        Ã¢â€”Â¦ Return undefined if the field cannot be found in the object: [2K[0G        Ã¢Å“â€œ Return undefined if the field cannot be found in the object 
        Ã¢â€”Â¦ Can navigate inside arrays with dot notation, and return the array of values in that case: [2K[0G        Ã¢Å“â€œ Can navigate inside arrays with dot notation, and return the array of values in that case 
        Ã¢â€”Â¦ Can get a single value out of an array using its index: [2K[0G        Ã¢Å“â€œ Can get a single value out of an array using its index 
      Field equality
        Ã¢â€”Â¦ Can find documents with simple fields: [2K[0G        Ã¢Å“â€œ Can find documents with simple fields 
        Ã¢â€”Â¦ Can find documents with the dot-notation: [2K[0G        Ã¢Å“â€œ Can find documents with the dot-notation 
        Ã¢â€”Â¦ Cannot find undefined: [2K[0G        Ã¢Å“â€œ Cannot find undefined 
        Ã¢â€”Â¦ Nested objects are deep-equality matched and not treated as sub-queries: [2K[0G        Ã¢Å“â€œ Nested objects are deep-equality matched and not treated as sub-queries 
        Ã¢â€”Â¦ Can match for field equality inside an array with the dot notation: [2K[0G        Ã¢Å“â€œ Can match for field equality inside an array with the dot notation 
      Regular expression matching
        Ã¢â€”Â¦ Matching a non-string to a regular expression always yields false: [2K[0G        Ã¢Å“â€œ Matching a non-string to a regular expression always yields false 
        Ã¢â€”Â¦ Can match strings using basic querying: [2K[0G        Ã¢Å“â€œ Can match strings using basic querying 
        Ã¢â€”Â¦ Can match strings using the $regex operator: [2K[0G        Ã¢Å“â€œ Can match strings using the $regex operator 
        Ã¢â€”Â¦ Will throw if $regex operator is used with a non regex value: [2K[0G        Ã¢Å“â€œ Will throw if $regex operator is used with a non regex value 
        Ã¢â€”Â¦ Can use the $regex operator in cunjunction with other operators: [2K[0G        Ã¢Å“â€œ Can use the $regex operator in cunjunction with other operators 
        Ã¢â€”Â¦ Can use dot-notation: [2K[0G        Ã¢Å“â€œ Can use dot-notation 
      $lt
        Ã¢â€”Â¦ Cannot compare a field to an object, an array, null or a boolean, it will return false: [2K[0G        Ã¢Å“â€œ Cannot compare a field to an object, an array, null or a boolean, it will return false 
        Ã¢â€”Â¦ Can compare numbers, with or without dot notation: [2K[0G        Ã¢Å“â€œ Can compare numbers, with or without dot notation 
        Ã¢â€”Â¦ Can compare strings, with or without dot notation: [2K[0G        Ã¢Å“â€œ Can compare strings, with or without dot notation 
        Ã¢â€”Â¦ If field is an array field, a match means a match on at least one element: [2K[0G        Ã¢Å“â€œ If field is an array field, a match means a match on at least one element 
        Ã¢â€”Â¦ Works with dates too: [2K[0G        Ã¢Å“â€œ Works with dates too 
      Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists
        Ã¢â€”Â¦ $lte: [2K[0G        Ã¢Å“â€œ $lte 
        Ã¢â€”Â¦ $gt: [2K[0G        Ã¢Å“â€œ $gt 
        Ã¢â€”Â¦ $gte: [2K[0G        Ã¢Å“â€œ $gte 
        Ã¢â€”Â¦ $ne: [2K[0G        Ã¢Å“â€œ $ne 
        Ã¢â€”Â¦ $in: [2K[0G        Ã¢Å“â€œ $in 
        Ã¢â€”Â¦ $nin: [2K[0G        Ã¢Å“â€œ $nin 
        Ã¢â€”Â¦ $exists: [2K[0G        Ã¢Å“â€œ $exists 
      Comparing on arrays
        Ã¢â€”Â¦ Can perform a direct array match: [2K[0G        Ã¢Å“â€œ Can perform a direct array match 
        Ã¢â€”Â¦ Can query on the size of an array field: [2K[0G        Ã¢Å“â€œ Can query on the size of an array field 
        Ã¢â€”Â¦ $size operator works with empty arrays: [2K[0G        Ã¢Å“â€œ $size operator works with empty arrays 
        Ã¢â€”Â¦ Should throw an error if a query operator is used without comparing to an integer: [2K[0G        Ã¢Å“â€œ Should throw an error if a query operator is used without comparing to an integer 
        Ã¢â€”Â¦ Using $size operator on a non-array field should prevent match but not throw: [2K[0G        Ã¢Å“â€œ Using $size operator on a non-array field should prevent match but not throw 
        Ã¢â€”Â¦ Can use $size several times in the same matcher: [2K[0G        Ã¢Å“â€œ Can use $size several times in the same matcher 
        Ã¢â€”Â¦ Can query array documents with multiple simultaneous conditions: [2K[0G        Ã¢Å“â€œ Can query array documents with multiple simultaneous conditions (38ms)
        Ã¢â€”Â¦ $elemMatch operator works with empty arrays: [2K[0G        Ã¢Å“â€œ $elemMatch operator works with empty arrays 
        Ã¢â€”Â¦ Can use more complex comparisons inside nested query documents: [2K[0G        Ã¢Å“â€œ Can use more complex comparisons inside nested query documents 
      Logical operators $or, $and, $not
        Ã¢â€”Â¦ Any of the subqueries should match for an $or to match: [2K[0G        Ã¢Å“â€œ Any of the subqueries should match for an $or to match 
        Ã¢â€”Â¦ All of the subqueries should match for an $and to match: [2K[0G        Ã¢Å“â€œ All of the subqueries should match for an $and to match 
        Ã¢â€”Â¦ Subquery should not match for a $not to match: [2K[0G        Ã¢Å“â€œ Subquery should not match for a $not to match 
        Ã¢â€”Â¦ Logical operators are all top-level, only other logical operators can be above: [2K[0G        Ã¢Å“â€œ Logical operators are all top-level, only other logical operators can be above 
        Ã¢â€”Â¦ Logical operators can be combined as long as they are on top of the decision tree: [2K[0G        Ã¢Å“â€œ Logical operators can be combined as long as they are on top of the decision tree 
        Ã¢â€”Â¦ Should throw an error if a logical operator is used without an array or if an unknown logical operator is used: [2K[0G        Ã¢Å“â€œ Should throw an error if a logical operator is used without an array or if an unknown logical operator is used 
      Comparison operator $where
        Ã¢â€”Â¦ Function should match and not match correctly: [2K[0G        Ã¢Å“â€œ Function should match and not match correctly 
        Ã¢â€”Â¦ Should throw an error if the $where function is not, in fact, a function: [2K[0G        Ã¢Å“â€œ Should throw an error if the $where function is not, in fact, a function 
        Ã¢â€”Â¦ Should throw an error if the $where function returns a non-boolean: [2K[0G        Ã¢Å“â€œ Should throw an error if the $where function returns a non-boolean 
        Ã¢â€”Â¦ Should be able to do the complex matching it must be used for: [2K[0G        Ã¢Å“â€œ Should be able to do the complex matching it must be used for 
      Array fields
        Ã¢â€”Â¦ Field equality: [2K[0G        Ã¢Å“â€œ Field equality 
        Ã¢â€”Â¦ With one comparison operator: [2K[0G        Ã¢Å“â€œ With one comparison operator 
        Ã¢â€”Â¦ Works with arrays that are in subdocuments: [2K[0G        Ã¢Å“â€œ Works with arrays that are in subdocuments 
        Ã¢â€”Â¦ Can query inside arrays thanks to dot notation: [2K[0G        Ã¢Å“â€œ Can query inside arrays thanks to dot notation 
        Ã¢â€”Â¦ Can query for a specific element inside arrays thanks to dot notation: [2K[0G        Ã¢Å“â€œ Can query for a specific element inside arrays thanks to dot notation 
        Ã¢â€”Â¦ A single array-specific operator and the query is treated as array specific: [2K[0G        Ã¢Å“â€œ A single array-specific operator and the query is treated as array specific 
        Ã¢â€”Â¦ Can mix queries on array fields and non array filds with array specific operators: [2K[0G        Ã¢Å“â€œ Can mix queries on array fields and non array filds with array specific operators 

  Model
    Serialization, deserialization
      Ã¢â€”Â¦ Can serialize and deserialize strings: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize strings 
      Ã¢â€”Â¦ Can serialize and deserialize booleans: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize booleans 
      Ã¢â€”Â¦ Can serialize and deserialize numbers: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize numbers 
      Ã¢â€”Â¦ Can serialize and deserialize null: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize null 
      Ã¢â€”Â¦ undefined fields are removed when serialized: [2K[0G      Ã¢Å“â€œ undefined fields are removed when serialized 
      Ã¢â€”Â¦ Can serialize and deserialize a date: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize a date 
      Ã¢â€”Â¦ Can serialize and deserialize sub objects: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize sub objects 
      Ã¢â€”Â¦ Can serialize and deserialize sub arrays: [2K[0G      Ã¢Å“â€œ Can serialize and deserialize sub arrays 
      Ã¢â€”Â¦ Reject field names beginning with a $ sign or containing a dot, except the four edge cases: [2K[0G      Ã¢Å“â€œ Reject field names beginning with a $ sign or containing a dot, except the four edge cases 
      Ã¢â€”Â¦ Can serialize string fields with a new line without breaking the DB: [2K[0G      Ã¢Å“â€œ Can serialize string fields with a new line without breaking the DB (347ms)
      Ã¢â€”Â¦ Can accept objects whose keys are numbers: [2K[0G      Ã¢Å“â€œ Can accept objects whose keys are numbers 
    Object checking
      Ã¢â€”Â¦ Field names beginning with a $ sign are forbidden: [2K[0G      Ã¢Å“â€œ Field names beginning with a $ sign are forbidden 
      Ã¢â€”Â¦ Field names cannot contain a .: [2K[0G      Ã¢Å“â€œ Field names cannot contain a . 
      Ã¢â€”Â¦ Properties with a null value dont trigger an error: [2K[0G      Ã¢Å“â€œ Properties with a null value dont trigger an error 
      Ã¢â€”Â¦ Can check if an object is a primitive or not: [2K[0G      Ã¢Å“â€œ Can check if an object is a primitive or not 
    Deep copying
      Ã¢â€”Â¦ Should be able to deep copy any serializable model: [2K[0G      Ã¢Å“â€œ Should be able to deep copy any serializable model 
      Ã¢â€”Â¦ Should deep copy the contents of an array: [2K[0G      Ã¢Å“â€œ Should deep copy the contents of an array 
      Ã¢â€”Â¦ Without the strictKeys option, everything gets deep copied: [2K[0G      Ã¢Å“â€œ Without the strictKeys option, everything gets deep copied 
      Ã¢â€”Â¦ With the strictKeys option, only valid keys gets deep copied: [2K[0G      Ã¢Å“â€œ With the strictKeys option, only valid keys gets deep copied 
    Modifying documents
      Ã¢â€”Â¦ Queries not containing any modifier just replace the document by the contents of the query but keep its _id: [2K[0G      Ã¢Å“â€œ Queries not containing any modifier just replace the document by the contents of the query but keep its _id 
      Ã¢â€”Â¦ Throw an error if trying to change the _id field in a copy-type modification: [2K[0G      Ã¢Å“â€œ Throw an error if trying to change the _id field in a copy-type modification 
      Ã¢â€”Â¦ Throw an error if trying to use modify in a mixed copy+modify way: [2K[0G      Ã¢Å“â€œ Throw an error if trying to use modify in a mixed copy+modify way 
      Ã¢â€”Â¦ Throw an error if trying to use an inexistent modifier: [2K[0G      Ã¢Å“â€œ Throw an error if trying to use an inexistent modifier 
      Ã¢â€”Â¦ Throw an error if a modifier is used with a non-object argument: [2K[0G      Ã¢Å“â€œ Throw an error if a modifier is used with a non-object argument 
      $set modifier
        Ã¢â€”Â¦ Can change already set fields without modfifying the underlying object: [2K[0G        Ã¢Å“â€œ Can change already set fields without modfifying the underlying object 
        Ã¢â€”Â¦ Creates fields to set if they dont exist yet: [2K[0G        Ã¢Å“â€œ Creates fields to set if they dont exist yet 
        Ã¢â€”Â¦ Can set sub-fields and create them if necessary: [2K[0G        Ã¢Å“â€œ Can set sub-fields and create them if necessary 
        Ã¢â€”Â¦ Doesn't replace a falsy field by an object when recursively following dot notation: [2K[0G        Ã¢Å“â€œ Doesn't replace a falsy field by an object when recursively following dot notation 
      $unset modifier
        Ã¢â€”Â¦ Can delete a field, not throwing an error if the field doesnt exist: [2K[0G        Ã¢Å“â€œ Can delete a field, not throwing an error if the field doesnt exist 
        Ã¢â€”Â¦ Can unset sub-fields and entire nested documents: [2K[0G        Ã¢Å“â€œ Can unset sub-fields and entire nested documents 
        Ã¢â€”Â¦ When unsetting nested fields, should not create an empty parent to nested field: [2K[0G        Ã¢Å“â€œ When unsetting nested fields, should not create an empty parent to nested field 
      $inc modifier
        Ã¢â€”Â¦ Throw an error if you try to use it with a non-number or on a non number field: [2K[0G        Ã¢Å“â€œ Throw an error if you try to use it with a non-number or on a non number field 
        Ã¢â€”Â¦ Can increment number fields or create and initialize them if needed: [2K[0G        Ã¢Å“â€œ Can increment number fields or create and initialize them if needed 
        Ã¢â€”Â¦ Works recursively: [2K[0G        Ã¢Å“â€œ Works recursively 
      $push modifier
        Ã¢â€”Â¦ Can push an element to the end of an array: [2K[0G        Ã¢Å“â€œ Can push an element to the end of an array 
        Ã¢â€”Â¦ Can push an element to a non-existent field and will create the array: [2K[0G        Ã¢Å“â€œ Can push an element to a non-existent field and will create the array 
        Ã¢â€”Â¦ Can push on nested fields: [2K[0G        Ã¢Å“â€œ Can push on nested fields 
        Ã¢â€”Â¦ Throw if we try to push to a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to push to a non-array 
        Ã¢â€”Â¦ Can use the $each modifier to add multiple values to an array at once: [2K[0G        Ã¢Å“â€œ Can use the $each modifier to add multiple values to an array at once 
        Ã¢â€”Â¦ Can use the $slice modifier to limit the number of array elements: [2K[0G        Ã¢Å“â€œ Can use the $slice modifier to limit the number of array elements 
      $addToSet modifier
        Ã¢â€”Â¦ Can add an element to a set: [2K[0G        Ã¢Å“â€œ Can add an element to a set 
        Ã¢â€”Â¦ Can add an element to a non-existent set and will create the array: [2K[0G        Ã¢Å“â€œ Can add an element to a non-existent set and will create the array 
        Ã¢â€”Â¦ Throw if we try to addToSet to a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to addToSet to a non-array 
        Ã¢â€”Â¦ Use deep-equality to check whether we can add a value to a set: [2K[0G        Ã¢Å“â€œ Use deep-equality to check whether we can add a value to a set 
        Ã¢â€”Â¦ Can use the $each modifier to add multiple values to a set at once: [2K[0G        Ã¢Å“â€œ Can use the $each modifier to add multiple values to a set at once 
      $pop modifier
        Ã¢â€”Â¦ Throw if called on a non array, a non defined field or a non integer: [2K[0G        Ã¢Å“â€œ Throw if called on a non array, a non defined field or a non integer 
        Ã¢â€”Â¦ Can remove the first and last element of an array: [2K[0G        Ã¢Å“â€œ Can remove the first and last element of an array 
      $pull modifier
        Ã¢â€”Â¦ Can remove an element from a set: [2K[0G        Ã¢Å“â€œ Can remove an element from a set 
        Ã¢â€”Â¦ Can remove multiple matching elements: [2K[0G        Ã¢Å“â€œ Can remove multiple matching elements 
        Ã¢â€”Â¦ Throw if we try to pull from a non-array: [2K[0G        Ã¢Å“â€œ Throw if we try to pull from a non-array 
        Ã¢â€”Â¦ Use deep-equality to check whether we can remove a value from a set: [2K[0G        Ã¢Å“â€œ Use deep-equality to check whether we can remove a value from a set 
        Ã¢â€”Â¦ Can use any kind of nedb query with $pull: [2K[0G        Ã¢Å“â€œ Can use any kind of nedb query with $pull 
      $max modifier
        Ã¢â€”Â¦ Will set the field to the updated value if value is greater than current one, without modifying the original object: [2K[0G        Ã¢Å“â€œ Will set the field to the updated value if value is greater than current one, without modifying the original object 
        Ã¢â€”Â¦ Will not update the field if new value is smaller than current one: [2K[0G        Ã¢Å“â€œ Will not update the field if new value is smaller than current one 
        Ã¢â€”Â¦ Will create the field if it does not exist: [2K[0G        Ã¢Å“â€œ Will create the field if it does not exist 
        Ã¢â€”Â¦ Works on embedded documents: [2K[0G        Ã¢Å“â€œ Works on embedded documents 
      $min modifier
        Ã¢â€”Â¦ Will set the field to the updated value if value is smaller than current one, without modifying the original object: [2K[0G        Ã¢Å“â€œ Will set the field to the updated value if value is smaller than current one, without modifying the original object 
        Ã¢â€”Â¦ Will not update the field if new value is greater than current one: [2K[0G        Ã¢Å“â€œ Will not update the field if new value is greater than current one 
        Ã¢â€”Â¦ Will create the field if it does not exist: [2K[0G        Ã¢Å“â€œ Will create the field if it does not exist 
        Ã¢â€”Â¦ Works on embedded documents: [2K[0G        Ã¢Å“â€œ Works on embedded documents 
    Comparing things
      Ã¢â€”Â¦ undefined is the smallest: [2K[0G      Ã¢Å“â€œ undefined is the smallest 
      Ã¢â€”Â¦ Then null: [2K[0G      Ã¢Å“â€œ Then null 
      Ã¢â€”Â¦ Then numbers: [2K[0G      Ã¢Å“â€œ Then numbers 
      Ã¢â€”Â¦ Then strings: [2K[0G      Ã¢Å“â€œ Then strings 
      Ã¢â€”Â¦ Then booleans: [2K[0G      Ã¢Å“â€œ Then booleans 
      Ã¢â€”Â¦ Then dates: [2K[0G      Ã¢Å“â€œ Then dates 
      Ã¢â€”Â¦ Then arrays: [2K[0G      Ã¢Å“â€œ Then arrays 
      Ã¢â€”Â¦ And finally objects: [2K[0G      Ã¢Å“â€œ And finally objects 
      Ã¢â€”Â¦ Can specify custom string comparison function: [2K[0G      Ã¢Å“â€œ Can specify custom string comparison function 
    Querying
      Comparing things
        Ã¢â€”Â¦ Two things of different types cannot be equal, two identical native things are equal: [2K[0G        Ã¢Å“â€œ Two things of different types cannot be equal, two identical native things are equal 
        Ã¢â€”Â¦ Can test native types null undefined string number boolean date equality: [2K[0G        Ã¢Å“â€œ Can test native types null undefined string number boolean date equality 
        Ã¢â€”Â¦ If one side is an array or undefined, comparison fails: [2K[0G        Ã¢Å“â€œ If one side is an array or undefined, comparison fails 
        Ã¢â€”Â¦ Can test objects equality: [2K[0G        Ã¢Å“â€œ Can test objects equality 
      Getting a fields value in dot notation
        Ã¢â€”Â¦ Return first-level and nested values: [2K[0G        Ã¢Å“â€œ Return first-level and nested values 
        Ã¢â€”Â¦ Return undefined if the field cannot be found in the object: [2K[0G        Ã¢Å“â€œ Return undefined if the field cannot be found in the object 
        Ã¢â€”Â¦ Can navigate inside arrays with dot notation, and return the array of values in that case: [2K[0G        Ã¢Å“â€œ Can navigate inside arrays with dot notation, and return the array of values in that case 
        Ã¢â€”Â¦ Can get a single value out of an array using its index: [2K[0G        Ã¢Å“â€œ Can get a single value out of an array using its index 
      Field equality
        Ã¢â€”Â¦ Can find documents with simple fields: [2K[0G        Ã¢Å“â€œ Can find documents with simple fields 
        Ã¢â€”Â¦ Can find documents with the dot-notation: [2K[0G        Ã¢Å“â€œ Can find documents with the dot-notation 
        Ã¢â€”Â¦ Cannot find undefined: [2K[0G        Ã¢Å“â€œ Cannot find undefined 
        Ã¢â€”Â¦ Nested objects are deep-equality matched and not treated as sub-queries: [2K[0G        Ã¢Å“â€œ Nested objects are deep-equality matched and not treated as sub-queries 
        Ã¢â€”Â¦ Can match for field equality inside an array with the dot notation: [2K[0G        Ã¢Å“â€œ Can match for field equality inside an array with the dot notation 
      Regular expression matching
        Ã¢â€”Â¦ Matching a non-string to a regular expression always yields false: [2K[0G        Ã¢Å“â€œ Matching a non-string to a regular expression always yields false 
        Ã¢â€”Â¦ Can match strings using basic querying: [2K[0G        Ã¢Å“â€œ Can match strings using basic querying 
        Ã¢â€”Â¦ Can match strings using the $regex operator: [2K[0G        Ã¢Å“â€œ Can match strings using the $regex operator 
        Ã¢â€”Â¦ Will throw if $regex operator is used with a non regex value: [2K[0G        Ã¢Å“â€œ Will throw if $regex operator is used with a non regex value 
        Ã¢â€”Â¦ Can use the $regex operator in cunjunction with other operators: [2K[0G        Ã¢Å“â€œ Can use the $regex operator in cunjunction with other operators 
        Ã¢â€”Â¦ Can use dot-notation: [2K[0G        Ã¢Å“â€œ Can use dot-notation 
      $lt
        Ã¢â€”Â¦ Cannot compare a field to an object, an array, null or a boolean, it will return false: [2K[0G        Ã¢Å“â€œ Cannot compare a field to an object, an array, null or a boolean, it will return false 
        Ã¢â€”Â¦ Can compare numbers, with or without dot notation: [2K[0G        Ã¢Å“â€œ Can compare numbers, with or without dot notation 
        Ã¢â€”Â¦ Can compare strings, with or without dot notation: [2K[0G        Ã¢Å“â€œ Can compare strings, with or without dot notation 
        Ã¢â€”Â¦ If field is an array field, a match means a match on at least one element: [2K[0G        Ã¢Å“â€œ If field is an array field, a match means a match on at least one element 
        Ã¢â€”Â¦ Works with dates too: [2K[0G        Ã¢Å“â€œ Works with dates too 
      Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists
        Ã¢â€”Â¦ $lte: [2K[0G        Ã¢Å“â€œ $lte 
        Ã¢â€”Â¦ $gt: [2K[0G        Ã¢Å“â€œ $gt 
        Ã¢â€”Â¦ $gte: [2K[0G        Ã¢Å“â€œ $gte 
        Ã¢â€”Â¦ $ne: [2K[0G        Ã¢Å“â€œ $ne 
        Ã¢â€”Â¦ $in: [2K[0G        Ã¢Å“â€œ $in 
        Ã¢â€”Â¦ $nin: [2K[0G        Ã¢Å“â€œ $nin 
        Ã¢â€”Â¦ $exists: [2K[0G        Ã¢Å“â€œ $exists 
      Comparing on arrays
        Ã¢â€”Â¦ Can perform a direct array match: [2K[0G        Ã¢Å“â€œ Can perform a direct array match 
        Ã¢â€”Â¦ Can query on the size of an array field: [2K[0G        Ã¢Å“â€œ Can query on the size of an array field 
        Ã¢â€”Â¦ $size operator works with empty arrays: [2K[0G        Ã¢Å“â€œ $size operator works with empty arrays 
        Ã¢â€”Â¦ Should throw an error if a query operator is used without comparing to an integer: [2K[0G        Ã¢Å“â€œ Should throw an error if a query operator is used without comparing to an integer 
        Ã¢â€”Â¦ Using $size operator on a non-array field should prevent match but not throw: [2K[0G        Ã¢Å“â€œ Using $size operator on a non-array field should prevent match but not throw 
        Ã¢â€”Â¦ Can use $size several times in the same matcher: [2K[0G        Ã¢Å“â€œ Can use $size several times in the same matcher 
        Ã¢â€”Â¦ Can query array documents with multiple simultaneous conditions: [2K[0G        Ã¢Å“â€œ Can query array documents with multiple simultaneous conditions 
        Ã¢â€”Â¦ $elemMatch operator works with empty arrays: [2K[0G        Ã¢Å“â€œ $elemMatch operator works with empty arrays 
        Ã¢â€”Â¦ Can use more complex comparisons inside nested query documents: [2K[0G        Ã¢Å“â€œ Can use more complex comparisons inside nested query documents 
      Logical operators $or, $and, $not
        Ã¢â€”Â¦ Any of the subqueries should match for an $or to match: [2K[0G        Ã¢Å“â€œ Any of the subqueries should match for an $or to match 
        Ã¢â€”Â¦ All of the subqueries should match for an $and to match: [2K[0G        Ã¢Å“â€œ All of the subqueries should match for an $and to match 
        Ã¢â€”Â¦ Subquery should not match for a $not to match: [2K[0G        Ã¢Å“â€œ Subquery should not match for a $not to match 
        Ã¢â€”Â¦ Logical operators are all top-level, only other logical operators can be above: [2K[0G        Ã¢Å“â€œ Logical operators are all top-level, only other logical operators can be above 
        Ã¢â€”Â¦ Logical operators can be combined as long as they are on top of the decision tree: [2K[0G        Ã¢Å“â€œ Logical operators can be combined as long as they are on top of the decision tree 
        Ã¢â€”Â¦ Should throw an error if a logical operator is used without an array or if an unknown logical operator is used: [2K[0G        Ã¢Å“â€œ Should throw an error if a logical operator is used without an array or if an unknown logical operator is used 
      Comparison operator $where
        Ã¢â€”Â¦ Function should match and not match correctly: [2K[0G        Ã¢Å“â€œ Function should match and not match correctly 
        Ã¢â€”Â¦ Should throw an error if the $where function is not, in fact, a function: [2K[0G        Ã¢Å“â€œ Should throw an error if the $where function is not, in fact, a function 
        Ã¢â€”Â¦ Should throw an error if the $where function returns a non-boolean: [2K[0G        Ã¢Å“â€œ Should throw an error if the $where function returns a non-boolean 
        Ã¢â€”Â¦ Should be able to do the complex matching it must be used for: [2K[0G        Ã¢Å“â€œ Should be able to do the complex matching it must be used for 
      Array fields
        Ã¢â€”Â¦ Field equality: [2K[0G        Ã¢Å“â€œ Field equality 
        Ã¢â€”Â¦ With one comparison operator: [2K[0G        Ã¢Å“â€œ With one comparison operator 
        Ã¢â€”Â¦ Works with arrays that are in subdocuments: [2K[0G        Ã¢Å“â€œ Works with arrays that are in subdocuments 
        Ã¢â€”Â¦ Can query inside arrays thanks to dot notation: [2K[0G        Ã¢Å“â€œ Can query inside arrays thanks to dot notation 
        Ã¢â€”Â¦ Can query for a specific element inside arrays thanks to dot notation: [2K[0G        Ã¢Å“â€œ Can query for a specific element inside arrays thanks to dot notation 
        Ã¢â€”Â¦ A single array-specific operator and the query is treated as array specific: [2K[0G        Ã¢Å“â€œ A single array-specific operator and the query is treated as array specific 
        Ã¢â€”Â¦ Can mix queries on array fields and non array filds with array specific operators: [2K[0G        Ã¢Å“â€œ Can mix queries on array fields and non array filds with array specific operators 

  Persistence
    Ã¢â€”Â¦ Every line represents a document: [2K[0G    Ã¢Å“â€œ Every line represents a document 
    Ã¢â€”Â¦ Badly formatted lines have no impact on the treated data: [2K[0G    Ã¢Å“â€œ Badly formatted lines have no impact on the treated data 
    Ã¢â€”Â¦ Well formatted lines that have no _id are not included in the data: [2K[0G    Ã¢Å“â€œ Well formatted lines that have no _id are not included in the data 
    Ã¢â€”Â¦ If two lines concern the same doc (= same _id), the last one is the good version: [2K[0G    Ã¢Å“â€œ If two lines concern the same doc (= same _id), the last one is the good version 
    Ã¢â€”Â¦ If a doc contains $$deleted: true, that means we need to remove it from the data: [2K[0G    Ã¢Å“â€œ If a doc contains $$deleted: true, that means we need to remove it from the data 
    Ã¢â€”Â¦ If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before: [2K[0G    Ã¢Å“â€œ If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before 
    Ã¢â€”Â¦ If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options: [2K[0G    Ã¢Å“â€œ If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options 
    Ã¢â€”Â¦ Compact database on load: [2K[0G    Ã¢Å“â€œ Compact database on load (103ms)
    Ã¢â€”Â¦ Calling loadDatabase after the data was modified doesnt change its contents: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the data was modified doesnt change its contents (165ms)
    Ã¢â€”Â¦ Calling loadDatabase after the datafile was removed will reset the database: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the datafile was removed will reset the database (145ms)
    Ã¢â€”Â¦ Calling loadDatabase after the datafile was modified loads the new data: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the datafile was modified loads the new data (154ms)
    Ã¢â€”Â¦ When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss: [2K[0G    Ã¢Å“â€œ When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss (380ms)
    Ã¢â€”Â¦ Can listen to compaction events: [2K[0G    Ã¢Å“â€œ Can listen to compaction events (58ms)
    Ã¢â€”Â¦ Every line represents a document: [2K[0G    Ã¢Å“â€œ Every line represents a document 
    Ã¢â€”Â¦ Badly formatted lines have no impact on the treated data: [2K[0G    Ã¢Å“â€œ Badly formatted lines have no impact on the treated data 
    Ã¢â€”Â¦ Well formatted lines that have no _id are not included in the data: [2K[0G    Ã¢Å“â€œ Well formatted lines that have no _id are not included in the data 
    Ã¢â€”Â¦ If two lines concern the same doc (= same _id), the last one is the good version: [2K[0G    Ã¢Å“â€œ If two lines concern the same doc (= same _id), the last one is the good version 
    Ã¢â€”Â¦ If a doc contains $$deleted: true, that means we need to remove it from the data: [2K[0G    Ã¢Å“â€œ If a doc contains $$deleted: true, that means we need to remove it from the data 
    Ã¢â€”Â¦ If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before: [2K[0G    Ã¢Å“â€œ If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before 
    Ã¢â€”Â¦ If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options: [2K[0G    Ã¢Å“â€œ If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options 
    Ã¢â€”Â¦ Compact database on load: [2K[0G    Ã¢Å“â€œ Compact database on load (134ms)
    Ã¢â€”Â¦ Calling loadDatabase after the data was modified doesnt change its contents: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the data was modified doesnt change its contents (138ms)
    Ã¢â€”Â¦ Calling loadDatabase after the datafile was removed will reset the database: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the datafile was removed will reset the database (143ms)
    Ã¢â€”Â¦ Calling loadDatabase after the datafile was modified loads the new data: [2K[0G    Ã¢Å“â€œ Calling loadDatabase after the datafile was modified loads the new data (147ms)
    Ã¢â€”Â¦ When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss: [2K[0G    Ã¢Å“â€œ When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss (617ms)
    Ã¢â€”Â¦ Can listen to compaction events: [2K[0G    Ã¢Å“â€œ Can listen to compaction events (46ms)
    Serialization hooks
      Ã¢â€”Â¦ Declaring only one hook will throw an exception to prevent data loss: [2K[0G      Ã¢Å“â€œ Declaring only one hook will throw an exception to prevent data loss 
      Ã¢â€”Â¦ Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss: [2K[0G      Ã¢Å“â€œ Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss 
      Ã¢â€”Â¦ A serialization hook can be used to transform data before writing new state to disk: [2K[0G      Ã¢Å“â€œ A serialization hook can be used to transform data before writing new state to disk (239ms)
      Ã¢â€”Â¦ Use serialization hook when persisting cached database or compacting: [2K[0G      Ã¢Å“â€œ Use serialization hook when persisting cached database or compacting (245ms)
      Ã¢â€”Â¦ Deserialization hook is correctly used when loading data: [2K[0G      Ã¢Å“â€œ Deserialization hook is correctly used when loading data (370ms)
    Prevent dataloss when persisting data
      Ã¢â€”Â¦ Creating a datastore with in memory as true and a bad filename wont cause an error: [2K[0G      Ã¢Å“â€œ Creating a datastore with in memory as true and a bad filename wont cause an error (86ms)
      Ã¢â€”Â¦ Creating a persistent datastore with a bad filename will cause an error: [2K[0G      Ã¢Å“â€œ Creating a persistent datastore with a bad filename will cause an error 
      Ã¢â€”Â¦ If no file exists, ensureDatafileIntegrity creates an empty datafile: [2K[0G      Ã¢Å“â€œ If no file exists, ensureDatafileIntegrity creates an empty datafile (103ms)
      Ã¢â€”Â¦ If only datafile exists, ensureDatafileIntegrity will use it: [2K[0G      Ã¢Å“â€œ If only datafile exists, ensureDatafileIntegrity will use it (90ms)
      Ã¢â€”Â¦ If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use): [2K[0G      Ã¢Å“â€œ If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use) (94ms)
      Ã¢â€”Â¦ If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed: [2K[0G      Ã¢Å“â€œ If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed (165ms)
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state (57ms)
      Ã¢â€”Â¦ After a persistCachedDatabase, there should be no temp or old filename: [2K[0G      Ã¢Å“â€œ After a persistCachedDatabase, there should be no temp or old filename (61ms)
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile (56ms)
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile (174ms)
      Ã¢â€”Â¦ Persistence works as expected when everything goes fine: [2K[0G      Ã¢Å“â€œ Persistence works as expected when everything goes fine (380ms)
      Ã¢â€”Â¦ If system crashes during a loadDatabase, the former version is not lost: (node:3538872) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
[32m[2021-11-27T16:11:16.949] [INFO] default - [39mprocess exited
[32m[2021-11-27T16:11:16.950] [INFO] default - [39mDone collecting trace.
[2K[0G      Ã¢Å“â€œ If system crashes during a loadDatabase, the former version is not lost (7620ms)
      Ã¢â€”Â¦ Cannot cause EMFILE errors by opening too many file descriptors: [2K[0G      11) Cannot cause EMFILE errors by opening too many file descriptors
    ensureFileDoesntExist
      Ã¢â€”Â¦ Doesnt do anything if file already doesnt exist: [2K[0G      Ã¢Å“â€œ Doesnt do anything if file already doesnt exist 
      Ã¢â€”Â¦ Deletes file if it exists: [2K[0G      Ã¢Å“â€œ Deletes file if it exists 
    Serialization hooks
      Ã¢â€”Â¦ Declaring only one hook will throw an exception to prevent data loss: [2K[0G      Ã¢Å“â€œ Declaring only one hook will throw an exception to prevent data loss 
      Ã¢â€”Â¦ Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss: [2K[0G      Ã¢Å“â€œ Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss 
      Ã¢â€”Â¦ A serialization hook can be used to transform data before writing new state to disk: [2K[0G      Ã¢Å“â€œ A serialization hook can be used to transform data before writing new state to disk (133ms)
      Ã¢â€”Â¦ Use serialization hook when persisting cached database or compacting: [2K[0G      Ã¢Å“â€œ Use serialization hook when persisting cached database or compacting (135ms)
      Ã¢â€”Â¦ Deserialization hook is correctly used when loading data: [2K[0G      Ã¢Å“â€œ Deserialization hook is correctly used when loading data (233ms)
    Prevent dataloss when persisting data
      Ã¢â€”Â¦ Creating a datastore with in memory as true and a bad filename wont cause an error: [2K[0G      Ã¢Å“â€œ Creating a datastore with in memory as true and a bad filename wont cause an error (86ms)
      Ã¢â€”Â¦ Creating a persistent datastore with a bad filename will cause an error: [2K[0G      Ã¢Å“â€œ Creating a persistent datastore with a bad filename will cause an error 
      Ã¢â€”Â¦ If no file exists, ensureDatafileIntegrity creates an empty datafile: [2K[0G      Ã¢Å“â€œ If no file exists, ensureDatafileIntegrity creates an empty datafile (95ms)
      Ã¢â€”Â¦ If only datafile exists, ensureDatafileIntegrity will use it: [2K[0G      Ã¢Å“â€œ If only datafile exists, ensureDatafileIntegrity will use it (87ms)
      Ã¢â€”Â¦ If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use): [2K[0G      Ã¢Å“â€œ If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use) (89ms)
      Ã¢â€”Â¦ If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed: [2K[0G      Ã¢Å“â€œ If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed (116ms)
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state 
      Ã¢â€”Â¦ After a persistCachedDatabase, there should be no temp or old filename: [2K[0G      Ã¢Å“â€œ After a persistCachedDatabase, there should be no temp or old filename 
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile 
      Ã¢â€”Â¦ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile: [2K[0G      Ã¢Å“â€œ persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile (110ms)
      Ã¢â€”Â¦ Persistence works as expected when everything goes fine: [2K[0G      Ã¢Å“â€œ Persistence works as expected when everything goes fine (286ms)
      Ã¢â€”Â¦ If system crashes during a loadDatabase, the former version is not lost: (node:3539027) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
[32m[2021-11-27T16:11:28.695] [INFO] default - [39mprocess exited
[32m[2021-11-27T16:11:28.696] [INFO] default - [39mDone collecting trace.
[2K[0G      Ã¢Å“â€œ If system crashes during a loadDatabase, the former version is not lost (7585ms)
      Ã¢â€”Â¦ Cannot cause EMFILE errors by opening too many file descriptors: [2K[0G      12) Cannot cause EMFILE errors by opening too many file descriptors
    ensureFileDoesntExist
      Ã¢â€”Â¦ Doesnt do anything if file already doesnt exist: [2K[0G      Ã¢Å“â€œ Doesnt do anything if file already doesnt exist 
      Ã¢â€”Â¦ Deletes file if it exists: [2K[0G      Ã¢Å“â€œ Deletes file if it exists 


  Ã¢Å“â€“ 12 of 660 tests failed:

  1) Database Insert If timestampData option is set, a createdAt field is added and persisted:
     AssertionError: expected 112 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:337:20
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  2) Database Insert If timestampData is set but createdAt is specified by user, don't change it:
     AssertionError: expected 117 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:392:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  3) Database Insert If timestampData is set but updatedAt is specified by user, don't change it:
     AssertionError: expected 110 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:419:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  4) Database Update If timestampData option is set, update the updatedAt field:
     AssertionError: expected 113 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:1319:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  5) Database Update createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement:
     AssertionError: expected 8 to be below 5
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:1997:22
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at Cursor.execFn (/tmp/nraceOutput/nedb-2436f61/lib/datastore.js:1040:138)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at callback (/tmp/nraceOutput/nedb-2436f61/lib/cursor.js:253:136)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/cursor.js:365:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:639:154
      at Object.async.eachSeries (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:130:20)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:592:125
      at fn (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:582:34)
      at Immediate.<anonymous> (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:498:34)
      at processImmediate (node:internal/timers:464:21)
      at process.callbackTrampoline (node:internal/async_hooks:130:17)

  6) Database Insert If timestampData option is set, a createdAt field is added and persisted:
     AssertionError: expected 116 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:337:20
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  7) Database Insert If timestampData is set but createdAt is specified by user, don't change it:
     AssertionError: expected 107 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:392:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  8) Database Insert If timestampData is set but updatedAt is specified by user, don't change it:
     AssertionError: expected 108 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:419:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  9) Database Update If timestampData option is set, update the updatedAt field:
     AssertionError: expected 108 to be below 60
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:1319:18
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:714:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/persistence.js:449:134
      at FSReqCallback.oncomplete (node:fs:188:23)
      at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)

  10) Database Update createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement:
     AssertionError: expected 7 to be below 5
      at Function.assert.isBelow (/tmp/nraceOutput/nedb-2436f61/node_modules/chai/lib/chai/interface/assert.js:293:35)
      at /tmp/nraceOutput/nedb-2436f61/test/db.test.js:1997:22
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/executor.js:45:140
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at Cursor.execFn (/tmp/nraceOutput/nedb-2436f61/lib/datastore.js:1040:138)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at callback (/tmp/nraceOutput/nedb-2436f61/lib/cursor.js:253:136)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/cursor.js:365:134
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:227:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:639:154
      at Object.async.eachSeries (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:130:20)
      at callFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:190:51)
      at invokeFun (/home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:211:22)
      at /home/soulike/nrace/lib/analysis/jalangi2/src/js/runtime/analysis.js:236:41
      at /tmp/nraceOutput/nedb-2436f61/lib/datastore.js:592:125
      at fn (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:582:34)
      at Immediate.<anonymous> (/tmp/nraceOutput/nedb-2436f61/node_modules/async/lib/async.js:498:34)
      at processImmediate (node:internal/timers:464:21)
      at process.callbackTrampoline (node:internal/async_hooks:130:17)

  11) Persistence Prevent dataloss when persisting data Cannot cause EMFILE errors by opening too many file descriptors:
     Error: Command failed: test_lac/openFdsLaunch.sh
Error: EMFILE: too many open files, open 'ascii-trace.log'
    at Object.openSync (node:fs:585:3)
    at Object.writeFileSync (node:fs:2153:35)
    at Object.appendFileSync (node:fs:2215:6)
    at AsciiFSTracer.flush (/home/soulike/nrace/lib/analysis/Logging.js:631:12)
    at AsciiFSTracer.flushIfNeeded (/home/soulike/nrace/lib/analysis/Logging.js:607:18)
    at AsciiFSTracer.AbstractFluentTracer.logAsyncAfter (/home/soulike/nrace/lib/analysis/Logging.js:549:14)
    at AsyncHook.after (/home/soulike/nrace/lib/analysis/AsyncMonitor.js:37:25)
    at emitHook (node:internal/async_hooks:237:38)
    at FSReqCallback.callbackTrampoline (node:internal/async_hooks:134:5)
Error: EMFILE: too many open files, open 'ascii-trace.log'
    at Object.openSync (node:fs:585:3)
    at Object.writeFileSync (node:fs:2153:35)
    at Object.appendFileSync (node:fs:2215:6)
    at AsciiFSTracer.flush (/home/soulike/nrace/lib/analysis/Logging.js:631:12)
    at AsciiFSTracer.flushIfNeeded (/home/soulike/nrace/lib/analysis/Logging.js:607:18)
    at AsciiFSTracer.AbstractFluentTracer.logAsyncInit (/home/soulike/nrace/lib/analysis/Logging.js:531:14)
    at AsyncHook.init (/home/soulike/nrace/lib/analysis/AsyncMonitor.js:27:29)
    at FSReqCallback.emitInitNative (node:internal/async_hooks:205:43)
    at Object.write (node:fs:819:17)
    at WriteStream._write (node:internal/fs/streams:397:13)

      at ChildProcess.exithandler (node:child_process:397:12)
      at ChildProcess.emit (node:events:390:28)
      at maybeClose (node:internal/child_process:1064:16)
      at Process.ChildProcess._handle.onexit (node:internal/child_process:301:5)
      at Process.callbackTrampoline (node:internal/async_hooks:130:17)

  12) Persistence Prevent dataloss when persisting data Cannot cause EMFILE errors by opening too many file descriptors:
     Error: Command failed: test_lac/openFdsLaunch.sh
Error: EMFILE: too many open files, open 'ascii-trace.log'
    at Object.openSync (node:fs:585:3)
    at Object.writeFileSync (node:fs:2153:35)
    at Object.appendFileSync (node:fs:2215:6)
    at AsciiFSTracer.flush (/home/soulike/nrace/lib/analysis/Logging.js:631:12)
    at AsciiFSTracer.flushIfNeeded (/home/soulike/nrace/lib/analysis/Logging.js:607:18)
    at AsciiFSTracer.AbstractFluentTracer.logAsyncAfter (/home/soulike/nrace/lib/analysis/Logging.js:549:14)
    at AsyncHook.after (/home/soulike/nrace/lib/analysis/AsyncMonitor.js:37:25)
    at emitHook (node:internal/async_hooks:237:38)
    at FSReqCallback.callbackTrampoline (node:internal/async_hooks:134:5)
Error: EMFILE: too many open files, open 'ascii-trace.log'
    at Object.openSync (node:fs:585:3)
    at Object.writeFileSync (node:fs:2153:35)
    at Object.appendFileSync (node:fs:2215:6)
    at AsciiFSTracer.flush (/home/soulike/nrace/lib/analysis/Logging.js:631:12)
    at AsciiFSTracer.flushIfNeeded (/home/soulike/nrace/lib/analysis/Logging.js:607:18)
    at AsciiFSTracer.AbstractFluentTracer.logAsyncInit (/home/soulike/nrace/lib/analysis/Logging.js:531:14)
    at AsyncHook.init (/home/soulike/nrace/lib/analysis/AsyncMonitor.js:27:29)
    at FSReqCallback.emitInitNative (node:internal/async_hooks:205:43)
    at Object.write (node:fs:819:17)
    at WriteStream._write (node:internal/fs/streams:397:13)

      at ChildProcess.exithandler (node:child_process:397:12)
      at ChildProcess.emit (node:events:390:28)
      at maybeClose (node:internal/child_process:1064:16)
      at Process.ChildProcess._handle.onexit (node:internal/child_process:301:5)
      at Process.callbackTrampoline (node:internal/async_hooks:130:17)


[32m[2021-11-27T16:11:33.242] [INFO] default - [39mprocess exited
[32m[2021-11-27T16:11:33.243] [INFO] default - [39mDone collecting trace.

soulike@soulike-virtual:/tmp/nraceOutput/nedb-2436f61$ ls -lah
total 313M
drwxrwxr-x 11 soulike soulike 4.0K Nov 27 16:12  .
drwxrwxr-x 24 soulike soulike 4.0K Nov 27 16:02  ..
-rw-r--r--  1 soulike soulike  174 Nov 27 16:11  application.log
-rw-rw-r--  1 soulike soulike 1.7M Nov 27 16:12  ascii-trace.access-records.json
-rw-rw-r--  1 soulike soulike   21 Nov 27 16:12  ascii-trace.actions.json
-rw-rw-r--  1 soulike soulike 235M Nov 27 16:11 'ascii-trace-bak-Sat Nov 27 2021 16:11:13 GMT+0800 (China Standard Time).log'
-rw-rw-r--  1 soulike soulike  30M Nov 27 16:11 'ascii-trace-bak-Sat Nov 27 2021 16:11:21 GMT+0800 (China Standard Time).log'
-rw-rw-r--  1 soulike soulike  15M Nov 27 16:11 'ascii-trace-bak-Sat Nov 27 2021 16:11:25 GMT+0800 (China Standard Time).log'
-rw-rw-r--  1 soulike soulike  30M Nov 27 16:11 'ascii-trace-bak-Sat Nov 27 2021 16:11:32 GMT+0800 (China Standard Time).log'
-rw-rw-r--  1 soulike soulike  213 Nov 27 16:12  ascii-trace.context-chain.json
-rw-rw-r--  1 soulike soulike 2.1K Nov 27 16:12  ascii-trace.context.json
-rw-rw-r--  1 soulike soulike 9.9K Nov 27 16:12  ascii-trace.dyContext-chain.json
-rw-rw-r--  1 soulike soulike 1.4M Nov 27 16:11  ascii-trace.log
-rw-rw-r--  1 soulike soulike  33K Nov 27 16:12  ascii-trace.newhb-full.json