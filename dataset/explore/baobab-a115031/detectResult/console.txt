yarn run v1.22.17
$ yarn build
$ rm -rf dist/ && tsc --noEmit
$ node esbuild.js

  dist/index.js                     196.8kb
  dist/bin/nodeprof-no-analysis.js   72.6kb
  dist/bin/nodeprof-test.js           1.6kb
  dist/bin/nodeprof-raw.js            1.2kb
  dist/bin/nodeprof.js                1.2kb
  dist/bin/node.js                    817b 

$ node ./dist/bin/nodeprof-test.js /home/soulike/NodeALDataset/explore/baobab-a115031/ node_modules/.bin/_mocha --require test/register.js --require ts-node/register --require tsconfig-paths/register 'test/suites/*.ts' --timeout 8000 --exit
Missing baseUrl in compilerOptions. tsconfig-paths will be skipped
Browserslist: caniuse-lite is outdated. Please run the following command: `npm update`


  Baobab API
    Basics
      ✓ should throw an error when trying to instantiate an baobab with incorrect data.
    Selection
      ✓ selecting data in the baobab should return a cursor. (49ms)
      ✓ should be possible to use some polymorphism on the selection. (205ms)
      ✓ should be possible to select data using a function. (153ms)
      ✓ should be possible to select data using a descriptor object. (99ms)
      ✓ should be possible to select the tree's root safely. (306ms)
    Events
      ✓ should be possible to listen to update events. (284ms)
      ✓ should only fire updates once when committing synchronously but when not in synchronous mode. (233ms)
      ✓ should be possible to listen to new selections. (144ms)
      ✓ should be possible to listen to get events. (129ms)
      ✓ should be possible to listen to failed dynamic get events. (180ms)
      ✓ update events should expose the tree's data. (140ms)
      ✓ moot updates should not trigger an update of the tree. (158ms)
      ✓ manual commit should not trigger an update if the transaction is empty. (197ms)
    Advanced
      ✓ should be possible to release a tree. (265ms)
      ✓ the tree should shift references on updates. (276ms)
      ✓ the `set` operation should also shift the references. (200ms)
      ✓ the `apply` operation should also shift the references. (229ms)
      ✓ the tree should also shift parent references. (421ms)
    Options
      ✓ should be possible to commit changes immediately. (202ms)
      ✓ should be possible to let the user commit himself. (328ms)
      ✓ should be possible to validate the tree and rollback on fail. (258ms)
      ✓ should be possible to validate the tree and let the tree update on fail. (337ms)
      ✓ should be possible to validate the initial data of the tree. (163ms)
      ✓ the tree should be immutable by default. (1171ms)
      ✓ should be possible to disable immutability. (298ms)
      ✓ if persitence is disabled, so should immutability. (99ms)
      ✓ turning persistence off should work. (617ms)
      ✓ should be possible to enforce purity. (224ms)
      ✓ should be possible to disable monkeys's laziness. (584ms)
      ✓ should handle monkeys as normal object when they are disabled (347ms)

  Baobab API
    Basics
      ✓ should throw an error when trying to instantiate an baobab with incorrect data.
    Selection
      ✓ selecting data in the baobab should return a cursor. (38ms)
      ✓ should be possible to use some polymorphism on the selection. (75ms)
      ✓ should be possible to select data using a function. (101ms)
      ✓ should be possible to select data using a descriptor object. (67ms)
      ✓ should be possible to select the tree's root safely. (131ms)
    Events
      ✓ should be possible to listen to update events. (285ms)
      ✓ should only fire updates once when committing synchronously but when not in synchronous mode. (154ms)
      ✓ should be possible to listen to new selections. (183ms)
      ✓ should be possible to listen to get events. (158ms)
      ✓ should be possible to listen to failed dynamic get events. (195ms)
      ✓ update events should expose the tree's data. (123ms)
      ✓ moot updates should not trigger an update of the tree. (130ms)
      ✓ manual commit should not trigger an update if the transaction is empty. (123ms)
    Advanced
      ✓ should be possible to release a tree. (146ms)
      ✓ the tree should shift references on updates. (154ms)
      ✓ the `set` operation should also shift the references. (156ms)
      ✓ the `apply` operation should also shift the references. (135ms)
      ✓ the tree should also shift parent references. (272ms)
    Options
      ✓ should be possible to commit changes immediately. (123ms)
      ✓ should be possible to let the user commit himself. (186ms)
      ✓ should be possible to validate the tree and rollback on fail. (218ms)
      ✓ should be possible to validate the tree and let the tree update on fail. (232ms)
      ✓ should be possible to validate the initial data of the tree. (182ms)
      ✓ the tree should be immutable by default. (697ms)
      ✓ should be possible to disable immutability. (172ms)
      ✓ if persitence is disabled, so should immutability. (58ms)
      ✓ turning persistence off should work. (497ms)
      ✓ should be possible to enforce purity. (230ms)
      ✓ should be possible to disable monkeys's laziness. (418ms)
      ✓ should handle monkeys as normal object when they are disabled (360ms)

  Cursor API
    ✓ should be possible to restart a history after having stopped it before. (274ms)
    Getters
      Root cursor
        ✓ should be possible to retrieve full data.
        ✓ should be possible to retrieve nested data. (74ms)
        ✓ should be possible to get data from both maps and lists. (84ms)
        ✓ should return undefined when data is not to be found through path. (46ms)
        ✓ should be possible to retrieve items using a function in path. (81ms)
        ✓ should be possible to retrieve items with a descriptor object. (127ms)
        ✓ should not fail when retrieved data is null on the path. (46ms)
        ✓ should throw when using an invalid path in getters.
        ✓ should be possible to use some projection. (151ms)
        ✓ an unsolved dynamic cursor should get undefined. (127ms)
        ✓ should be possible to tell whether a path exists or not. (124ms)
        ✓ should be possible to assess whether an undefined value exists.
      Standard cursors
        ✓ should be possible to retrieve data at cursor.
        ✓ should be possible to shallow clone data at cursor. (73ms)
        ✓ should be possible to deep clone data at cursor. (224ms)
        ✓ should be possible to retrieve data with a 0 key. (115ms)
        ✓ should be possible to retrieve nested data.
        ✓ should be possible to use some polymorphism on the getter.
        ✓ should be possible to tell whether a cursor exists or not. (177ms)
    Setters
      Root cursor
        ✓ should be possible to set a key using a path rather than a key. (282ms)
        ✓ should be possible to set a key at an nonexistent path. (309ms)
        ✓ should be possible to set a key using a dynamic path. (411ms)
        ✓ should (263ms)
        ✓ should fail when setting a nonexistent dynamic path. (277ms)
        ✓ should be possible to write the tree synchronously. (206ms)
        ✓ using an unknown operation type should throw. (137ms)
      Standard cursor
        ✓ should warn the user when too many arguments are applied to a setter. (224ms)
        ✓ should throw an error when the provided path is incorrect. (258ms)
        ✓ should be possible to set a key using a path rather than a key. (329ms)
        ✓ should be possible to set a key at an nonexistent path. (330ms)
        ✓ should be possible to set a key using a dynamic path. (413ms)
        ✓ should fail when setting a nonexistent dynamic path. (403ms)
        ✓ should fail consistently across possibilities when setting a nonexistent dynamic path. (289ms)
        ✓ should support setting non-enumerable properties (227ms)
        ✓ should support setting deep non-enumerable properties (251ms)
        ✓ should be possible to shallow merge two objects. (242ms)
        ✓ should be possible to deep merge two objects. (251ms)
        ✓ should be possible to remove keys from a cursor. (183ms)
        ✓ should be possible to remove data at cursor. (205ms)
        ✓ should be possible to unset an array's item. (244ms)
        ✓ should do nothing to unset an inexistant key. (195ms)
        ✓ should be possible to unset null/undefined values. (400ms)
        ✓ should be possible to push/unshift/concat to an array. (291ms)
        ✓ should be possible to splice an array. (301ms)
        ✓ should be possible to pop an array. (420ms)
        ✓ should be possible to shift an array. (375ms)
        ✓ should be possible to set a falsy value. (303ms)
        ✓ should be possible to set values using a falsy path. (376ms)
        ✓ should throw errors when updating with wrong values. (129ms)
    Events
      ✓ should be possible to listen to updates. (459ms)
      ✓ when a parent updates, so does the child. (455ms)
      ✓ when a child updates, so does the parent. (541ms)
      1) when a leave updates, it should not update its siblings.
      ✓ should not notify siblings in an array when pushing. (399ms)
      ✓ should be possible to listen to changes in an array. (325ms)
      ✓ should fire update correctly even when root node is affected. (307ms)
      ✓ update events should expose the cursor's data. (260ms)
      ✓ update events should expose previous computed data. (803ms)
      ✓ dynamic cursors should see their solvedPath correctly update on writes. (353ms)
    Predicates
      ✓ should be possible to tell whether cursor is root. (61ms)
      ✓ should be possible to tell whether cursor is leaf. (63ms)
      ✓ should be possible to tell whether cursor is branch. (76ms)
    Traversal
      ✓ should be possible to create subcursors. (59ms)
      ✓ should be possible to go up. (73ms)
      ✓ a cusor going up to root cannot go higher and returns null. (41ms)
      ✓ should be possible to go left. (279ms)
      ✓ should be possible to go right. (386ms)
      ✓ should be possible to descend. (1137ms)
      ✓ should be possible to get to the leftmost item of a list. (174ms)
      ✓ should be possible to get to the rightmost item of a list. (214ms)
      ✓ should be possible to iterate over an array. (282ms)
      ✓ should be possible to map an array. (412ms)
      ✓ should be supported correctly with dynamic cursors. (587ms)
    History
      ✓ should be possible to record updates. (643ms)
      ✓ should throw an error if trying to undo a recordless cursor. (175ms)
      ✓ should be possible to go back in time. (1241ms)
    Advanced
      ✓ should be possible to execute several orders within a single stack. (395ms)
      ✓ should be possible to merge push-like specifications. (567ms)
      ✓ an upper set should correctly resolve. (371ms)
      ✓ a $set/$apply conflict should correctly resolve. (293ms)
      ✓ should be possible to set a nested key on a primitive path. (273ms)

  Cursor API
    ✓ should be possible to restart a history after having stopped it before. (282ms)
    Getters
      Root cursor
        ✓ should be possible to retrieve full data.
        ✓ should be possible to retrieve nested data. (116ms)
        ✓ should be possible to get data from both maps and lists. (95ms)
        ✓ should return undefined when data is not to be found through path. (88ms)
        ✓ should be possible to retrieve items using a function in path. (102ms)
        ✓ should be possible to retrieve items with a descriptor object. (196ms)
        ✓ should not fail when retrieved data is null on the path. (53ms)
        ✓ should throw when using an invalid path in getters.
        ✓ should be possible to use some projection. (219ms)
        ✓ an unsolved dynamic cursor should get undefined. (210ms)
        ✓ should be possible to tell whether a path exists or not. (146ms)
        ✓ should be possible to assess whether an undefined value exists. (42ms)
      Standard cursors
        ✓ should be possible to retrieve data at cursor.
        ✓ should be possible to shallow clone data at cursor. (52ms)
        ✓ should be possible to deep clone data at cursor. (304ms)
        ✓ should be possible to retrieve data with a 0 key. (223ms)
        ✓ should be possible to retrieve nested data.
        ✓ should be possible to use some polymorphism on the getter. (49ms)
        ✓ should be possible to tell whether a cursor exists or not. (258ms)
    Setters
      Root cursor
        ✓ should be possible to set a key using a path rather than a key. (448ms)
        ✓ should be possible to set a key at an nonexistent path. (484ms)
        ✓ should be possible to set a key using a dynamic path. (631ms)
        ✓ should (462ms)
        ✓ should fail when setting a nonexistent dynamic path. (373ms)
        ✓ should be possible to write the tree synchronously. (265ms)
        ✓ using an unknown operation type should throw. (153ms)
      Standard cursor
        ✓ should warn the user when too many arguments are applied to a setter. (348ms)
        ✓ should throw an error when the provided path is incorrect. (420ms)
        ✓ should be possible to set a key using a path rather than a key. (531ms)
        ✓ should be possible to set a key at an nonexistent path. (455ms)
        ✓ should be possible to set a key using a dynamic path. (571ms)
        ✓ should fail when setting a nonexistent dynamic path. (454ms)
        ✓ should fail consistently across possibilities when setting a nonexistent dynamic path. (410ms)
        ✓ should support setting non-enumerable properties (307ms)
        ✓ should support setting deep non-enumerable properties (383ms)
        ✓ should be possible to shallow merge two objects. (323ms)
        ✓ should be possible to deep merge two objects. (357ms)
        ✓ should be possible to remove keys from a cursor. (321ms)
        ✓ should be possible to remove data at cursor. (274ms)
        ✓ should be possible to unset an array's item. (305ms)
        ✓ should do nothing to unset an inexistant key. (227ms)
        ✓ should be possible to unset null/undefined values. (419ms)
        ✓ should be possible to push/unshift/concat to an array. (316ms)
        ✓ should be possible to splice an array. (374ms)
        ✓ should be possible to pop an array. (508ms)
        ✓ should be possible to shift an array. (533ms)
        ✓ should be possible to set a falsy value. (391ms)
        ✓ should be possible to set values using a falsy path. (487ms)
        ✓ should throw errors when updating with wrong values. (211ms)
    Events
      ✓ should be possible to listen to updates. (652ms)
      ✓ when a parent updates, so does the child. (675ms)
      ✓ when a child updates, so does the parent. (611ms)
      2) when a leave updates, it should not update its siblings.
      ✓ should not notify siblings in an array when pushing. (597ms)
      ✓ should be possible to listen to changes in an array. (386ms)
      ✓ should fire update correctly even when root node is affected. (403ms)
      ✓ update events should expose the cursor's data. (530ms)
      ✓ update events should expose previous computed data. (898ms)
      ✓ dynamic cursors should see their solvedPath correctly update on writes. (579ms)
    Predicates
      ✓ should be possible to tell whether cursor is root. (99ms)
      ✓ should be possible to tell whether cursor is leaf. (137ms)
      ✓ should be possible to tell whether cursor is branch. (116ms)
    Traversal
      ✓ should be possible to create subcursors. (94ms)
      ✓ should be possible to go up. (110ms)
      ✓ a cusor going up to root cannot go higher and returns null. (48ms)
      ✓ should be possible to go left. (357ms)
      ✓ should be possible to go right. (414ms)
      ✓ should be possible to descend. (1569ms)
      ✓ should be possible to get to the leftmost item of a list. (244ms)
      ✓ should be possible to get to the rightmost item of a list. (237ms)
      ✓ should be possible to iterate over an array. (296ms)
      ✓ should be possible to map an array. (543ms)
      ✓ should be supported correctly with dynamic cursors. (667ms)
    History
      ✓ should be possible to record updates. (1021ms)
      ✓ should throw an error if trying to undo a recordless cursor. (291ms)
      ✓ should be possible to go back in time. (1625ms)
    Advanced
      ✓ should be possible to execute several orders within a single stack. (543ms)
      ✓ should be possible to merge push-like specifications. (731ms)
      ✓ an upper set should correctly resolve. (584ms)
      ✓ a $set/$apply conflict should correctly resolve. (443ms)
      ✓ should be possible to set a nested key on a primitive path. (493ms)

  Helpers
    GetIn
      ✓ should return both data at path and solved path.
      ✓ should also work with dynamic paths. (51ms)
      ✓ should return a not-found object when the data cannot be accessed.
    Merge
      ✓ should be possible to shallow merge objects.
      ✓ the merge functions should be mutative.
      ✓ should be possible to deep merge objects.
      ✓ deep merge should avoid computed node keys.
      ✓ should consider arrays are values.
      ✓ merge should not pollute object prototype.
    Splice
      ✓ should work in a non-mutative fashion. (58ms)
      ✓ should treat a negative nb argument as 0.
      ✓ should properly handle negative indexes. (38ms)
      ✓ should handle predicates & descriptors as start index. (71ms)
      Issue #472 - tree/cursor.splice does not conform with the specification as of ES6 (ECMAScript 2015)
        ✓ should be possible to splice an array when omitting the nb (deleteCount) argument
        ✓ should ignore the nb (deleteCount) argument when passing null, undefined, empty string, or false (45ms)
        ✓ should allow for nb (deleteCount) argument to be true, a coereced string, a decimal, or Infinity
        ✓ should throw an error when supplying an argument for nb (deleteCount) which is not parseable as number
    Relative paths solving
      ✓ should work for every cases.

  Helpers
    GetIn
      ✓ should return both data at path and solved path.
      ✓ should also work with dynamic paths.
      ✓ should return a not-found object when the data cannot be accessed.
    Merge
      ✓ should be possible to shallow merge objects.
      ✓ the merge functions should be mutative.
      ✓ should be possible to deep merge objects.
      ✓ deep merge should avoid computed node keys.
      ✓ should consider arrays are values.
      ✓ merge should not pollute object prototype.
    Splice
      ✓ should work in a non-mutative fashion. (62ms)
      ✓ should treat a negative nb argument as 0.
      ✓ should properly handle negative indexes. (49ms)
      ✓ should handle predicates & descriptors as start index. (59ms)
      Issue #472 - tree/cursor.splice does not conform with the specification as of ES6 (ECMAScript 2015)
        ✓ should be possible to splice an array when omitting the nb (deleteCount) argument
        ✓ should ignore the nb (deleteCount) argument when passing null, undefined, empty string, or false (42ms)
        ✓ should allow for nb (deleteCount) argument to be true, a coereced string, a decimal, or Infinity
        ✓ should throw an error when supplying an argument for nb (deleteCount) which is not parseable as number
    Relative paths solving
      ✓ should work for every cases.

  Monkeys
    ✓ the monkey definition type should work correctly. (93ms)
    ✓ should be possible to create monkey definitions from objects. (159ms)
    ✓ should be possible to create monkeys at instantiation. (827ms)
    ✓ should be possible to create monkeys using a shorthand. (887ms)
    ✓ should be possible to use path polymorphism. (534ms)
    ✓ should be possible to get monkeys from the tree. (451ms)
    ✓ computed data should be immutable. (724ms)
    ✓ should be possible to access data from beyond monkeys. (890ms)
    ✓ monkeys should update when their dependencies update. (1292ms)
    ✓ monkeys should be able to work with dynamic paths. (1380ms)
    ✓ cursors with a monkey in the path should work correctly. (1326ms)
    ✓ cursors should be able to listen to beyond monkeys. (858ms)
    ✓ getting a higher key should correctly solve computed data. (776ms)
    ✓ should be possible to serialize the tree or some of its parts. (1130ms)
    ✓ should work recursively. (2536ms)
    ✓ should handle selections beyond monkeys and recursivity. (3752ms)
    ✓ should even work with complex recursivity. (3413ms)
    ✓ recursivity should take updates into account. (1962ms)
    ✓ data retrieved through facets should be immutable by default. (1533ms)
    ✓ should warn the user when he attempts to update a path beneath a monkey. (1029ms)
    ✓ should be possible to add new monkeys at runtime. (1820ms)
    ✓ should be lazy by default. (1474ms)
    ✓ should be possible to drop monkeys somehow. (832ms)
    ✓ merging should not disturb monkeys. (4240ms)
    ✓ should be possible to use relative paths when defining monkeys' dependencies. (3105ms)
    ✓ should be possible to disable a single monkey's immutability. (476ms)
    ✓ should be possible to disable a single monkey's immutability using the shorthand method. (555ms)
    ✓ monkey's laziness should not mess things up when a monkey's immutability is disabled. (612ms)
    should be possible to replace monkeys at runtime.
      ✓ with default tree. (2327ms)
      ✓ with mutable tree. (2060ms)
      ✓ with non-persistent tree. (2010ms)
      ✓ with impure tree. (2227ms)
      ✓ with mutable, non-persistent, impure tree. (1922ms)
      ✓ releases all listeners from the existing monkey (2547ms)
    with immutable and persistent tree
      ✓ should be lazy if added at runtime. (1633ms)
      ✓ should be lazy. (822ms)
    without immutability or persistence
      ✓ should be lazy if added at runtime. (1462ms)
      ✓ should be lazy. (877ms)
    Issue #430 - All non-monkey keys are lost during merge when monkey present
      ✓ should not drop data (2321ms)
    Issue #422 - nested monkey errors when listening to undefined path
      ✓ should not drop monkeys (2892ms)
    Issue #448 - Monkeys don't emit update events?
      ✓ update events emitted by a monkey should also reach the parents of the monkey. (1412ms)

  Monkeys
    ✓ the monkey definition type should work correctly. (162ms)
    ✓ should be possible to create monkey definitions from objects. (279ms)
    ✓ should be possible to create monkeys at instantiation. (1002ms)
    ✓ should be possible to create monkeys using a shorthand. (1127ms)
    ✓ should be possible to use path polymorphism. (853ms)
    ✓ should be possible to get monkeys from the tree. (442ms)
    ✓ computed data should be immutable. (1000ms)
    ✓ should be possible to access data from beyond monkeys. (960ms)
    ✓ monkeys should update when their dependencies update. (1685ms)
    ✓ monkeys should be able to work with dynamic paths. (1671ms)
    ✓ cursors with a monkey in the path should work correctly. (1803ms)
    ✓ cursors should be able to listen to beyond monkeys. (1091ms)
    ✓ getting a higher key should correctly solve computed data. (1120ms)
    ✓ should be possible to serialize the tree or some of its parts. (1171ms)
    ✓ should work recursively. (3437ms)
    ✓ should handle selections beyond monkeys and recursivity. (4573ms)
    ✓ should even work with complex recursivity. (4790ms)
    ✓ recursivity should take updates into account. (2632ms)
    ✓ data retrieved through facets should be immutable by default. (2044ms)
    ✓ should warn the user when he attempts to update a path beneath a monkey. (1041ms)
    ✓ should be possible to add new monkeys at runtime. (2313ms)
    ✓ should be lazy by default. (1688ms)
    ✓ should be possible to drop monkeys somehow. (1328ms)
    ✓ merging should not disturb monkeys. (5175ms)
    ✓ should be possible to use relative paths when defining monkeys' dependencies. (3650ms)
    ✓ should be possible to disable a single monkey's immutability. (685ms)
    ✓ should be possible to disable a single monkey's immutability using the shorthand method. (675ms)
    ✓ monkey's laziness should not mess things up when a monkey's immutability is disabled. (649ms)
    should be possible to replace monkeys at runtime.
      ✓ with default tree. (2813ms)
      ✓ with mutable tree. (2820ms)
      ✓ with non-persistent tree. (2378ms)
      ✓ with impure tree. (2856ms)
      ✓ with mutable, non-persistent, impure tree. (2762ms)
      ✓ releases all listeners from the existing monkey (3019ms)
    with immutable and persistent tree
      ✓ should be lazy if added at runtime. (1878ms)
      ✓ should be lazy. (1277ms)
    without immutability or persistence
      ✓ should be lazy if added at runtime. (1729ms)
      ✓ should be lazy. (945ms)
    Issue #430 - All non-monkey keys are lost during merge when monkey present
      ✓ should not drop data (2847ms)
    Issue #422 - nested monkey errors when listening to undefined path
      ✓ should not drop monkeys (3549ms)
    Issue #448 - Monkeys don't emit update events?
      ✓ update events emitted by a monkey should also reach the parents of the monkey. (1670ms)

  Watchers
    ✓ should be possible to track some paths within the tree. (2304ms)
    ✓ should be possible to give cursors to a watcher. (2414ms)
    ✓ should be possible to pass paths following usual polymorphisms. (1444ms)
    ✓ should be possible to use dynamic paths. (2647ms)
    ✓ should be possible to watch over monkeys. (2380ms)
    ✓ should be possible to watch over paths beneath monkeys. (1845ms)
    ✓ should be possible to retrieve a mapping of the watcher's cursors. (926ms)


  349 passing (4m)
  2 failing

  1) Cursor API
       Events
         when a leave updates, it should not update its siblings.:

      Uncaught AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:

0 !== 2

      + expected - actual

      -0
      +2
      
      at /home/soulike/NodeALDataset/explore/baobab-a115031/test/suites/cursor.ts:754:18
      at /home/soulike/NodeALDataset/explore/baobab-a115031/node_modules/async/dist/async.js:2960:19
      at wrapper (node_modules/async/dist/async.js:273:20)
      at iterateeCallback (node_modules/async/dist/async.js:426:28)
      at /home/soulike/NodeALDataset/explore/baobab-a115031/node_modules/async/dist/async.js:326:20
      at Timeout._onTimeout (node_modules/async/dist/async.js:2958:17)
      at listOnTimeout (internal/timers.js:554:17)
      at processTimers (internal/timers.js:497:7)

  2) Cursor API
       Events
         when a leave updates, it should not update its siblings.:

      Uncaught AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:

0 !== 2

      + expected - actual

      -0
      +2
      
      at /home/soulike/NodeALDataset/explore/baobab-a115031/test/suites/cursor.ts:754:18
      at /home/soulike/NodeALDataset/explore/baobab-a115031/node_modules/async/dist/async.js:2960:19
      at wrapper (node_modules/async/dist/async.js:273:20)
      at iterateeCallback (node_modules/async/dist/async.js:426:28)
      at /home/soulike/NodeALDataset/explore/baobab-a115031/node_modules/async/dist/async.js:326:20
      at Timeout._onTimeout (node_modules/async/dist/async.js:2958:17)
      at listOnTimeout (internal/timers.js:554:17)
      at processTimers (internal/timers.js:497:7)



AsyncContext: 0.093s
LastExpression: 0.192s
Iterator: 0.103s
Array: 1.801s
Set: 0.046s
Map: 0.071s
Object: 21.436s
FileHandle: 0.031s
FsAsync: 0.185s
FsSync: 0.113s
FsPromises: 0.056s
ArrayBuffer: 0.218s
Buffer: 0.291s
DataView: 0.146s
TypedArray: 0.244s
Primitive: 186.826s
HttpAgent: 0.051s
HttpIncomingMessage: 0.068s
HttpOutgoingMessage: 0.084s
Http: 0.035s
Net: 0.021s
Stream: 0.043s
EventEmitter: 0.088s
Crypto: 0.983s
Zlib: 0.118s
StringDecoder: 0.077s
JSON: 0.02s
max memory usage: 2.1337356567382812 GB
RaceDetector: 28.513s
analysis load: 1.687s
entry: 4:00.471 (m:ss.mmm)
eventCount: 421
raceCount: 0
filteredFPCount: 980
ResourceCount: 260478
ResourceOperationCount: 932886
analysis: 4:06.379 (m:ss.mmm)
Done in 249.02s.
