soulike@soulike-virtual:~/NodeAL$ VERBOSE=1 yarn nodeprof:test ~/NodeALDataset/explore/line-reader-8b06b2b/ node_modules/.bin/_mocha test/line_reader.js
yarn run v1.22.17
$ yarn build
$ rm -rf dist/ && tsc --noEmit
$ node esbuild.js

  dist/index.js                     196.8kb
  dist/bin/nodeprof-no-analysis.js   72.6kb
  dist/bin/nodeprof-test.js           1.6kb
  dist/bin/nodeprof-raw.js            1.2kb
  dist/bin/nodeprof.js                1.2kb
  dist/bin/node.js                    817b 

$ node ./dist/bin/nodeprof-test.js /home/soulike/NodeALDataset/explore/line-reader-8b06b2b/ node_modules/.bin/_mocha test/line_reader.js


  lineReader
    eachLine
      ✓ should read lines using the default separator (823ms)
      ✓ should read windows files by default (246ms)
      ✓ should handle \r\n overlapping buffer window correctly (157ms)
      ✓ should read unix files by default (199ms)
      ✓ should read mac os 9 files by default (169ms)
      ✓ should allow continuation of line reading via a callback (160ms)
      ✓ should separate files using given separator (106ms)
      ✓ should separate files using given separator with more than one character (78ms)
      ✓ should allow early termination of line reading (95ms)
      ✓ should allow early termination of line reading via a callback (73ms)
      ✓ should not call callback on empty file
      ✓ should error when the user tries calls nextLine on a closed LineReader (54ms)
      ✓ should work with a file containing only one line (62ms)
      ✓ should work with a file containing only one line and no endline character. (92ms)
      ✓ should close the file when eachLine finishes (59ms)
(read) Declaration err at (lib/line_reader.js:94:12:94:15) are not logged.
      ✓ should close the file if there is an error during eachLine (131ms)
    open
      ✓ should return a reader object and allow calls to nextLine (247ms)
      ✓ should work with a file containing only one line (65ms)
      ✓ should read multibyte characters on the buffer boundary (438ms)
      ✓ should support opened streams
      ✓ should handle error while opening read stream
      hasNextLine
        ✓ should return true when buffer is empty but not at EOF (201ms)

  lineReader
    eachLine
      ✓ should read lines using the default separator (193ms)
      ✓ should read windows files by default (196ms)
      ✓ should handle \r\n overlapping buffer window correctly (137ms)
      ✓ should read unix files by default (168ms)
      ✓ should read mac os 9 files by default (171ms)
      ✓ should allow continuation of line reading via a callback (238ms)
      ✓ should separate files using given separator (125ms)
      ✓ should separate files using given separator with more than one character (145ms)
      ✓ should allow early termination of line reading (132ms)
      ✓ should allow early termination of line reading via a callback (128ms)
      ✓ should not call callback on empty file (62ms)
      ✓ should error when the user tries calls nextLine on a closed LineReader (124ms)
      ✓ should work with a file containing only one line (97ms)
      ✓ should work with a file containing only one line and no endline character. (68ms)
      ✓ should close the file when eachLine finishes (74ms)
(read) Declaration err at (lib/line_reader.js:94:12:94:15) are not logged.
      ✓ should close the file if there is an error during eachLine (154ms)
    open
      ✓ should return a reader object and allow calls to nextLine (147ms)
      ✓ should work with a file containing only one line (111ms)
      ✓ should read multibyte characters on the buffer boundary (595ms)
      ✓ should support opened streams
      ✓ should handle error while opening read stream
      hasNextLine
        ✓ should return true when buffer is empty but not at EOF (111ms)


  44 passing (9s)

AsyncContext: 0.148s
LastExpression: 0.017s
Iterator: 0.03s
Array: 0.01s
Set: 0.006s
Map: 0.011s
Object: 0.695s
FileHandle: 0.007s
FsAsync: 0.039s
FsSync: 0.095s
FsPromises: 0.024s
ArrayBuffer: 0.019s
Buffer: 0.044s
DataView: 0.021s
TypedArray: 0.045s
Primitive: 5.223s
HttpAgent: 0.009s
HttpIncomingMessage: 0.009s
HttpOutgoingMessage: 0.019s
Http: 0.006s
Net: 0.07s
Stream: 0.011s
EventEmitter: 0.024s
Crypto: 0.168s
Zlib: 0.036s
StringDecoder: 0.063s
JSON: 0.004s
max memory usage: 1.402984619140625 GB
RaceDetector: 1.419s
analysis load: 1.633s
entry: 10.789s
eventCount: 896
raceCount: 8
filteredFPCount: 30
ResourceCount: 12117
ResourceOperationCount: 29894
analysis: 15.696s
Done in 18.32s.